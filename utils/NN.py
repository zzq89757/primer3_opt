from collections import defaultdict, deque


def loop_detective(duplex_str: str) -> defaultdict:
    """
    检测分子杂交(duplex)中的loop结构(internal loop 和 bulge loop)
    """
    seq1, seq2 = duplex_str.split("\n")
    # ord sum is  AT: 65 + 84 = 149   CG: 67 + 71 = 138
    match_asc_li = [149, 138]
    gap_asc_li = [90, 129, 116, 112, 110]
    ord_sum_li = [ord(x) + ord(y) for x, y in zip(seq1, seq2)]
    # record mismatch and gaps,then recogonize bulge loop and internal loop
    loop_region_dict = defaultdict(
        deque
    )  # region_pos: start and end index, region_type: 0 for bulge,1 for int loop
    region_type_flag = 0  # 0 for bulge,1 for int loop
    flag = 0  # switch to record region start and end index
    print(ord_sum_li)
    for i, v in enumerate(ord_sum_li):
        if v not in match_asc_li and not flag:
            loop_region_dict["region_pos"].append(i)
            flag = 1
        if v not in gap_asc_li and v not in match_asc_li:
            region_type_flag = 1
        if v in match_asc_li and flag:
            loop_region_dict["region_pos"].append(i - 1)
            loop_region_dict["region_type"].append(region_type_flag)
            flag = 0
            region_type_flag = 0
    print(loop_region_dict)
    return loop_region_dict


def basen2int(base: str) -> int:
    """将base(with N)转化为索引号"""
    trantab = str.maketrans("ACGTN", "01234")
    return int(base.upper().translate(trantab), base=5)


def base2int(base: str) -> int:
    """将base(without N)转化为索引号"""
    trantab = str.maketrans("ACGT", "0123")
    return int(base.upper().translate(trantab), base=4)


def stack_energy(segment: str) -> list:
    """近邻法计算stack的总能量值"""
    delta_h = [
        -7.2, -7.8, -5.8, -5.3, # AA AC AG AT
        -9.9, -7.5, -9.8, -5.8, # CA CC CG CT
        -8.5, -7.9, -7.5, -7.8, # GA GC GG GT
        -6.7, -8.5, -9.9, -7.2  # TA TC TG TT
    ]
    delta_g = [
        -1.0, -1.4, -1.3, -0.9, # AA AC AG AT
        -1.5, -1.8, -2.2, -1.3, # CA CC CG CT
        -1.3, -2.2, -1.8, -1.4, # GA GC GG GT
        -0.6, -1.3, -1.5, -1.0  # TA TC TG TT
    ]
    delta_s = [(x - y) / 310.15 * 1000 for x, y in zip(delta_h, delta_g)]
    stack_dh = 0
    stack_ds = 0
    stack_dg = 0
    # print(delta_g)
    for i in range(len(segment) - 1):
        two_mer = segment[i] + segment[i + 1]
        d_index = base2int(two_mer)
        stack_dh += delta_h[d_index]
        stack_ds += delta_s[d_index]
        stack_dg += delta_g[d_index]
    print(f"stack dg is {stack_dg}")
    return [stack_dh, stack_ds]


def intermolecular_initiation_energy() -> list:
    ii_dh = -7.2  # intermolecular initiation dh
    ii_dg = 1.0  # intermolecular initiation dg
    ii_ds = (ii_dh - ii_dg) / 310.15 * 1000  # intermolecular initiation ds
    return [ii_dh, ii_ds]


def bulge_energy(bulge_length: int) -> list:
    """计算不同长度bulge的总能量值"""
    # bulge loop dh dg
    bulge_loop_dict = defaultdict(deque)
    bulge_loop_dict["dh"] = deque([18.9, -0.6, -2.3] + [-14.1] * 27)
    bulge_loop_dict["dg"] = deque(
        [
            2.9,
            2.3,
            2.5,
            2.7,
            3.0,
            3.2,
            3.4,
            3.5,
            3.6,
            3.7,
            3.9,
            3.9,
            4.0,
            4.1,
            4.2,
            4.3,
            4.3,
            4.4,
            4.4,
            4.5,
            4.5,
            4.6,
            4.6,
            4.7,
            4.7,
            4.7,
            4.8,
            4.9,
            4.9,
            4.9,
        ]
    )
    
    bulge_loop_dh = bulge_loop_dict["dh"][bulge_length - 1]
    bulge_loop_dg = bulge_loop_dict["dg"][bulge_length - 1]
    bulge_loop_ds = ((bulge_loop_dh - bulge_loop_dg) / 310.15) * 1000
    
    return [bulge_loop_dh, bulge_loop_ds]


def index_intl11(upstream_base: str, downstream_base: str, x_base: str, y_base: str) -> list:
    """
    		X
		   A T
		   T A
		    Y
    """ 
    external_index = base2int(upstream_base + downstream_base)
    internal_index = base2int(x_base + y_base)
    return [external_index, internal_index]


def index_intl21(upstream_base: str, downstream_base: str, x_base: str, y_base: str, y_neibor_base: str) -> list:
    """		    
            X
		   A  A
		   T  T
		    YA
    """
    external_index = base2int(y_neibor_base + upstream_base + downstream_base)
    internal_index = base2int(x_base + y_base)
    return [external_index, internal_index]


def index_intl22(upstream_base: str, downstream_base: str, x_base1: str, y_base1: str, x_base2: str, y_base2: str) -> list:
    """
    	A X1 Y1 A
	    T X2 Y2 T
    """
    external_index = base2int(upstream_base + downstream_base)
    internal_index = base2int(x_base1 + x_base2 + y_base1 + y_base2)
    return [external_index, internal_index]
    
    
def symmetric_int_loop_energy(segment1: str, segment2: str, loop_sum: int, int_loop_energy_dict: defaultdict) -> list:
    """对称的int loop结构直接读取矩阵数据累加"""
    symmetric_int_loop_dh = symmetric_int_loop_dg = symmetric_int_loop_ds = 0
    # base init
    upstream_base = segment1[0] 
    downstream_base = segment1[-1]
    x_base = segment1[1]
    y_base = segment2[1]
    
    # 1 * 1
    if loop_sum == 2:
       external_index, internal_index = index_intl11(upstream_base, downstream_base, x_base, y_base)
       symmetric_int_loop_dh += int_loop_energy_dict["11dh"][external_index][internal_index]
       symmetric_int_loop_dg += int_loop_energy_dict["11dg"][external_index][internal_index]
    # 1 * 2
    elif loop_sum == 3:
        y_neibor_base = segment2[2]
        external_index, internal_index = index_intl21(upstream_base, downstream_base, x_base, y_base, y_neibor_base)
        symmetric_int_loop_dh += int_loop_energy_dict["21dh"][external_index][internal_index]
        symmetric_int_loop_dg += int_loop_energy_dict["21dg"][external_index][internal_index]
    # 2 * 2
    else:
        x_base1 = x_base
        x_base2 = y_base
        y_base1 = segment1[2]
        y_base2 = segment2[2]
        external_index, internal_index = index_intl22(upstream_base, downstream_base, x_base1, y_base1, x_base2, y_base2)
        symmetric_int_loop_dh += int_loop_energy_dict["22dh"][external_index][internal_index]
        symmetric_int_loop_dg += int_loop_energy_dict["22dg"][external_index][internal_index]
    print(f"symmetric_int_loop_dg is {symmetric_int_loop_dg}")
    symmetric_int_loop_ds = ((symmetric_int_loop_dh - symmetric_int_loop_dg) / 310.15) * 1000
    
    return [symmetric_int_loop_dh, symmetric_int_loop_ds]


def asymmetry_correct_energy(loop_diff_abs: int) -> list:
    asymmetry_dg = 0.4
    asymmetry_dh = 0
    asymmetry_ds = ((asymmetry_dh - asymmetry_dg) / 310.15) * 1000
    asymmetry_correct_dh = asymmetry_dh * loop_diff_abs
    asymmetry_correct_ds = asymmetry_ds * asymmetry_ds
    return [asymmetry_correct_dh, asymmetry_correct_ds]


def asymmetric_int_loop_initiation_energy(loop_sum: int) -> list:
    initiation_dg = [
        3.1,
        3.5,
        3.9,
        4.1,
        4.2,
        4.3,
        4.5,
        4.6,
        4.6,
        4.7,
        4.8,
        4.9,
        5.0,
        5.0,
        5.1,
        5.1,
        5.2,
        5.3,
        5.3,
        5.3,
        5.4,
        5.4,
        5.5,
        5.5,
        5.6,
        5.6,
        5.6,
    ]
    initiation_dh = [0.0] * 27
    initiation_ds = [
        ((x - y) / 310.15) * 1000 for x, y in zip(initiation_dh, initiation_dg)
    ]
    return [initiation_dh[loop_sum - 4], initiation_ds[loop_sum - 4]]


def asymmetric_int_loop_mismatch_energy(
    segment1: str, segment2: str, int_loop_type: list
) -> list:
    """只有非对称且min loop > 1 才考虑mismatch"""
    mm_dg = deque([
        # A X
        # T Y
        [
            -0.7,-0.3,-0.5,-0.0,
            -0.6,-0.2,0.0,-0.3,
            -0.6,0.0,-0.4,-0.5,
            0.0,-0.3,-0.5,-0.4,
        ],
        # C X
        # G Y
        [
            -1.0,-0.8,-0.9,0.0,
            -0.8,-0.5,0.0,-0.7,
            -1.0,0.0,-0.9,-1.0,
            0.0,-0.6,-0.9,-0.9,
        ],
        # G X
        # C Y
        [
            -1.0,-0.7,-0.8,0.0,
            -1.0,-0.6,0.0,-0.7,
            -1.0,0.0,-1.0,-0.8,
            0.0,-0.6,-0.9,-0.9,
        ],
        # T X
        # A Y
        [
            -0.6,-0.4,-0.5,0.0,
            -0.5,-0.2,0.0,-0.5,
            -0.6,-0.0,-0.4,-0.5,
            0.0,-0.3,-0.6,-0.3,
        ],
])
    mm_dh = deque([
        # A X
        # T Y
        [
            4.0,5.2,4.7,4.3,
            4.0,5.2,4.7,4.3,
            4.0,5.2,4.7,4.3,
            4.0,5.2,4.7,4.3,
        ],
        # C X
        # G Y
        [
            -4.6,-4.2,-4.7,-5.0,
            -4.6,-4.2,-4.7,-5.0,
            -4.6,-4.2,-4.7,-5.0,
            -4.6,-4.2,-4.7,-5.0,
        ],
        # G X
        # C Y
        [
            -6.2,-3.3,-5.1,-0.9,
            -6.2,-3.3,-5.1,-0.9,
            -6.2,-3.3,-5.1,-0.9,
            -6.2,-3.3,-5.1,-0.9,
        ],
        # T X
        # A Y
        [
            2.3,1.7,0.7,-5.8,
            2.3,1.7,0.7,-5.8,
            2.3,1.7,0.7,-5.8,
            2.3,1.7,0.7,-5.8,
        ],
])

    mismatch_dh = mismatch_dg = mismatch_ds = 0
    mismatch1_dh = mismatch1_dg = mismatch1_ds = 0
    mismatch2_dh = mismatch2_dg = mismatch2_ds = 0
    # min loop length == 1,do NOT consider mismatch energy
    if int_loop_type[0] == 1:return [0.0, 0.0]
    # mismatch energy calc by segment
    external_index = base2int(segment1[0])
    internal_index = base2int(segment1[1] + segment2[1])
    mismatch1_dh = mm_dh[external_index][internal_index]
    mismatch1_dg = mm_dg[external_index][internal_index]
    
    external_index = base2int(segment2[-1])
    internal_index = base2int(segment2[-2] + segment1[-2])
    mismatch2_dh = mm_dh[external_index][internal_index]
    mismatch2_dg = mm_dg[external_index][internal_index]
    
    mismatch_dh = mismatch1_dh + mismatch2_dh
    mismatch_dg = mismatch1_dg + mismatch2_dg
    
    mismatch_ds = ((mismatch_dh - mismatch_dg) / 310.15) * 1000
    return [mismatch_dh, mismatch_ds]

def asymmetric_int_loop_energy(
    segment1: str, segment2: str, loop_sum: int, loop_diff_abs: int, loop_type: list
) -> list:
    asymmetric_int_loop_dh = asymmetric_int_loop_ds = 0
    # intermolecular initiation energy
    ii_dh, ii_ds = intermolecular_initiation_energy()
    # loop sum initiation energy
    li_dh, li_ds = asymmetric_int_loop_initiation_energy(loop_sum)
    # asymmetry correct energy
    asymmetry_correct_dh, asymmetry_correct_ds = asymmetry_correct_energy(loop_diff_abs)
    # mismatch energy
    mm_dh, mm_ds = asymmetric_int_loop_mismatch_energy(segment1, segment2, loop_type)
    asymmetric_int_loop_dh = ii_dh + li_dh + asymmetry_correct_dh + mm_dh
    asymmetric_int_loop_ds = ii_ds + li_ds + asymmetry_correct_ds + mm_ds
    return [asymmetric_int_loop_dh, asymmetric_int_loop_ds]

def int_loop_energy(segment1: str, segment2: str, int_loop_energy_dict: defaultdict) -> list:
    """对intloop进行分型并计算能量"""
    int_loop_dh = 0
    int_loop_ds = 0
    int_loop_dg = 0

    # intermolecular initiation energy
    ii_dh, ii_ds = intermolecular_initiation_energy()
    int_loop_dh += ii_dh
    int_loop_ds += ii_ds
    
    first_loop_length = len(segment1) - segment1.count("-") - 2
    second_loop_length = len(segment2) - segment2.count("-") - 2 
    loop_sum = first_loop_length + second_loop_length
    max_loop_length = max(first_loop_length, second_loop_length)
    min_loop_length = loop_sum - max_loop_length
    loop_type = [min_loop_length, max_loop_length]
    is_symmetric = loop_sum <= 4 and max_loop_length < 3

    # 1×1, 1×2, 2×2 Internal Loops
    if is_symmetric:
        symmetric_int_loop_dh, symmetric_int_loop_ds = symmetric_int_loop_energy(segment1, segment2, loop_sum, int_loop_energy_dict)
        int_loop_dh += symmetric_int_loop_dh
        int_loop_ds += symmetric_int_loop_ds
    # Other Internal Loops
    else:
        loop_diff_abs = abs(first_loop_length - second_loop_length)
        asymmetric_int_loop_dh, asymmetric_int_loop_ds = asymmetric_int_loop_energy(
            segment1, segment2, loop_sum, loop_diff_abs, loop_type
        )
        int_loop_dh += asymmetric_int_loop_dh
        int_loop_ds += asymmetric_int_loop_ds

    return [int_loop_dh, int_loop_ds]


def calc_Tm_by_NN(duplex_str: str, loop_region_dict: defaultdict) -> float:
    # int loop energy matrix
    int_loop_energy_dict = defaultdict(deque)
    int_loop_energy_dict["11dg"] = deque([
        # A A
        # T T
        [
            1.3, 2.2, 0.9, 1.0, # AA AC AG AT
            1.7, 2.4, 1.0, 1.4, # CA CC CG CT
            1.7, 2.4, 1.0, 1.4, # GA GC GG GT
            1.7, 2.4, 1.0, 1.4, # TA TC TG TT           
        ],
        # A C
        # T G
        [
            0.8,  1.4, -0.4, 1.0, # AA AC AG AT
            1.6,  2.1,  1.0, 1.6, # CA CC CG CT
            -0.2, 1.0, -1.2, 2.0, # GA GC GG GT
            1.0,  1.4,  2.0, 1.1, # TA TC TG TT    
        ],
        # A G
        # T C
        [
            1.0, 1.7,  0.3, 1.0, # AA AC AG AT
            1.5, 2.0,  1.0, 1.0, # CA CC CG CT
            0.1, 1.0, -0.3, 2.0, # GA GC GG GT
            1.0, 1.4,  2.0, 0.6, # TA TC TG TT 
        ],
        # A T
        # T A
        [
            1.2, 1.7,  0.2, 1.0, # AA AC AG AT
            1.7, 2.7,  1.0, 1.4, # CA CC CG CT
            0.2, 1.0, -0.3, 2.0, # GA GC GG GT
            1.0, 1.4,  2.0, 1.4, # TA TC TG TT 
        ],
        # C A
        # G T
        [
            1.1, 2.1, 0.8, 1.0, # AA AC AG AT
            1.7, 1.8, 1.0, 1.4, # CA CC CG CT
            0.5, 1.0, 0.3, 2.0, # GA GC GG GT
            1.0, 1.4, 2.0, 0.6, # TA TC TG TT 
        ],
        # C C
        # G G
        [
            0.6,  1.2, -0.5, 1.0, # AA AC AG AT
            1.6,  1.5,  1.0, 1.6, # CA CC CG CT
            -0.1, 1.0, -1.3, 2.0, # GA GC GG GT
            1.0,  1.0,  2.0, 0.3, # TA TC TG TT 
        ],
        # C G
        # G C
        [
            0.9, 1.5,  0.1,  1.0, # AA AC AG AT
            1.5, 1.4,  1.0,  1.0, # CA CC CG CT
            0.1, 1.0, -0.3,  2.0, # GA GC GG GT
            1.0, 1.0,  2.0, -0.2, # TA TC TG TT 
        ],
        # C T
        # G A
        [
            1.0, 1.5,  0.1, 1.0, # AA AC AG AT
            1.7, 2.0,  1.0, 1.4, # CA CC CG CT
            0.3, 1.0, -0.3, 2.0, # GA GC GG GT
            1.0, 1.0,  2.0, 0.6, # TA TC TG TT 
        ],
        # G A
        # C T
        [
            0.9,  2.1,  0.5, 1.0, # AA AC AG AT
            1.4,  1.8,  1.0, 1.4, # CA CC CG CT
            -0.1, 1.0, -0.7, 2.0, # GA GC GG GT
            1.0,  2.0,  2.0, 1.1, # TA TC TG TT 
        ],
        # G C
        # C G
        [
            0.3,  1.3, -0.8, 1.0, # AA AC AG AT
            1.3,  1.6,  1.0, 1.6, # CA CC CG CT
            -0.8, 1.0, -2.2, 2.0, # GA GC GG GT
            1.0,  1.6,  2.0, 0.9, # TA TC TG TT 
        ],
        # G G
        # C C
        [
            0.6,  1.6, -0.1, 1.0, # AA AC AG AT
            1.2,  1.5,  1.0, 1.0, # CA CC CG CT
            -0.5, 1.0, -1.3, 2.0, # GA GC GG GT
            1.0,  1.6,  2.0, 0.3, # TA TC TG TT 
        ],
        # G T
        # C A
        [
            0.8,  1.6, -0.2, 1.0, # AA AC AG AT
            1.4,  2.1,  1.0, 1.4, # CA CC CG CT
            -0.4, 1.0, -1.2, 2.0, # GA GC GG GT
            1.0,  1.6,  2.0, 1.1, # TA TC TG TT 
        ],
        # T A
        # A T
        [
            1.4, 2.3, 1.2, 1.0, # AA AC AG AT
            2.3, 2.1, 1.0, 1.7, # CA CC CG CT
            1.2, 1.0, 0.9, 2.0, # GA GC GG GT
            1.0, 1.7, 2.0, 1.4, # TA TC TG TT 
        ],
        # T C
        # A G
        [
            0.9, 1.4, -0.1, 1.0, # AA AC AG AT
            2.1, 1.8,  1.0, 2.0, # CA CC CG CT
            0.5, 1.0, -0.7, 2.0, # GA GC GG GT
            1.0, 1.4,  2.0, 1.1, # TA TC TG TT 
        ],
        # T G
        # A C
        [
            1.1, 1.7, 0.5, 1.0, # AA AC AG AT
            2.1, 1.8, 1.0, 1.4, # CA CC CG CT
            0.8, 1.0, 0.3, 2.0, # GA GC GG GT
            1.0, 1.4, 2.0, 0.6, # TA TC TG TT 
        ],
        # T T
        # A A
        [
            1.3, 1.7, 0.4, 1.0, # AA AC AG AT
            2.2, 2.4, 1.0, 1.7, # CA CC CG CT
            0.9, 1.0, 0.3, 2.0, # GA GC GG GT
            1.0, 1.4, 2.0, 1.4, # TA TC TG TT 
        ]      
    ])
    
    int_loop_energy_dict["11dh"] = deque([
        # A A
        # T T
        [
            12.9,1.5,10.7,1.5,
            10.4,14.7,10.4,-1.6,
            1.8,1.5,1.6,1.5,
            10.4,3.5,10.4,-4.8,
        ],
        # A C
        # T G
        [
            10.0,10.9,8.9,10.9,
            4.1,12.8,4.1,1.3,
            4.5,10.9,-5.0,10.9,
            4.1,11.6,4.1,0.5,
        ],
        # A G
        # T C
        [
            5.0,3.9,-6.3,3.9,
            5.3,2.6,5.3,-4.9,
            -2.2,3.9,-9.9,3.9,
            5.3,-12.3,5.3,-7.5,
        ],
        # A T
        # T A
        [
            4.9,9.8,7.1,9.8,
            9.8,7.5,9.8,4.3,
            7.1,9.8,4.1,9.8,
            9.8,4.3,9.8,5.7,
        ],
        # C A
        # G T
        [
            10.0,13.2,11.3,13.2,
            9.6,5.9,9.6,0.1,
            6.9,13.2,-1.1,13.2,
            9.6,3.0,9.6,0.7,
        ],
        # C C
        # G G
        [
            -0.6,4.6,1.3,4.6,
            9.3,7.5,9.3,1.9,
            3.9,4.6,-0.9,4.6,
            9.3,0.5,9.3,2.1,
        ],
        # C G
        # G C
        [
            4.0,5.1,6.1,5.1,
            5.1,4.1,5.1,1.6,
            6.1,5.1,0.1,5.1,
            5.1,1.6,5.1,-2.7,
        ],
        # C T
        # G A
        [
            5.0,5.3,-2.2,5.3,
            3.9,2.6,3.9,-12.3,
            -6.3,5.3,-9.9,5.3,
            3.9,-4.9,3.9,-7.5,
        ],
        # G A
        # C T
        [
            -1.4,13.2,11.3,13.2,
            4.2,12.9,4.2,-0.4,
            6.9,13.2,3.4,13.2,
            4.2,3.7,4.2,-10.0,
        ],
        # G C
        # C G
        [
            2.6,3.9,2.4,3.9,
            3.9,6.0,3.9,-0.6,
            2.4,3.9,-2.8,3.9,
            3.9,-0.6,3.9,0.3,
        ],
        # G G
        # C C
        [
            -0.6,9.3,3.9,9.3,
            4.6,7.5,4.6,0.5,
            1.3,9.3,-0.9,9.3,
            4.6,1.9,4.6,2.1,
        ],
        # G T
        # C A
        [
            10.0,4.1,4.5,4.1,
            10.9,12.8,10.9,11.6,
            8.9,4.1,-5.0,4.1,
            10.9,1.3,10.9,0.5,
        ],
        # T A
        # A T
        [
            12.1,14.3,11.9,14.3,
            14.3,17.4,14.3,2.5,
            11.9,14.3,8.4,14.3,
            14.3,2.5,14.3,6.2,
        ],
        # T C
        # A G
        [
            -1.4,4.2,6.9,4.2,
            13.2,12.9,13.2,3.7,
            11.3,4.2,3.4,4.2,
            13.2,-0.4,13.2,-10.0,
        ],
        # T G
        # A C
        [
            10.0,9.6,6.9,9.6,
            13.2,5.9,13.2,3.0,
            11.3,9.6,-1.1,9.6,
            13.2,0.1,13.2,0.7,
        ],
        # T T
        # A A
        [
            12.9,10.4,1.8,10.4,
            1.5,14.7,1.5,3.5,
            10.7,10.4,1.6,10.4,
            1.5,-1.6,1.5,-4.8,
        ],
])
    
    int_loop_energy_dict["21dg"] = deque([
		# A  A
		# T AT
		[
			1.8,2.0,1.9,2.5,
			2.1,2.3,2.2,2.2,
			1.9,2.3,1.9,2.5,
			3.1,2.7,3.1,2.5,
		],
		# A  C
		# T AG
		[
			1.3,1.5,1.4,2.0,
			1.8,2.0,1.9,1.9,
			1.5,1.9,1.5,2.1,
			2.6,2.2,2.6,2.0,
		],
		# A  G
		# T AC
		[
			1.4,1.6,1.5,2.1,
			1.9,2.1,2.0,2.0,
			1.6,2.0,1.6,2.2,
			2.7,2.3,2.7,2.1,
		],
		# A  T
		# T AA
		[
			1.7,1.9,1.8,2.4,
			2.1,2.3,2.2,2.2,
			1.9,2.3,1.9,2.5,
			3.1,2.7,3.1,2.5,
		],
		# A  A
		# T CT
		[
			1.9,2.1,2.0,2.6,
			2.3,2.5,2.4,2.4,
			2.0,2.4,2.0,2.6,
			2.7,2.3,2.7,2.1,
		],
		# A  C
		# T CG
		[
			1.6,1.8,1.7,2.3,
			2.0,2.2,2.1,2.1,
			1.2,1.6,1.2,1.8,
			2.4,2.0,2.4,1.8,
		],
		# A  G
		# T CC
		[
			1.7,1.9,1.8,2.4,
			2.1,2.3,2.2,2.2,
			1.7,2.1,1.7,2.3,
			2.4,2.0,2.4,1.8,
		],
		# A  T
		# T CA
		[
			1.9,2.1,2.0,2.6,
			2.3,2.5,2.4,2.4,
			2.1,2.5,2.1,2.7,
			2.7,2.3,2.7,2.1,
		],
		# A  A
		# T GT
		[
			1.8,2.0,1.9,2.5,
			2.6,2.8,2.7,2.7,
			1.9,2.3,1.9,2.5,
			3.1,2.7,3.1,2.5,
		],
		# A  C
		# T GG
		[
			1.4,1.6,1.5,2.1,
			1.8,2.0,1.9,1.9,
			1.5,1.9,1.5,2.1,
			2.8,2.4,2.8,2.2,
		],
		# A  G
		# T GC
		[
			1.5,1.7,1.6,2.2,
			1.5,1.7,1.6,1.6,
			1.6,2.0,1.6,2.2,
			2.6,2.2,2.6,2.0,
		],
		# A  T
		# T GA
		[
			1.8,2.0,1.9,2.5,
			2.4,2.6,2.5,2.5,
			1.9,2.3,1.9,2.5,
			3.1,2.7,3.1,2.5,
		],
		# A  A
		# T TT
		[
			2.4,2.6,2.5,3.1,
			2.2,2.4,2.3,2.3,
			2.4,2.8,2.4,3.0,
			2.5,2.1,2.5,1.9,
		],
		# A  C
		# T TG
		[
			2.0,2.2,2.1,2.7,
			1.9,2.1,2.0,2.0,
			2.1,2.5,2.1,2.7,
			2.2,1.8,2.2,1.6,
		],
		# A  G
		# T TC
		[
			2.2,2.4,2.3,2.9,
			1.9,2.1,2.0,2.0,
			2.1,2.5,2.1,2.7,
			2.2,1.8,2.2,1.6,
		],
		# A  T
		# T TA
		[
			2.4,2.6,2.5,3.1,
			2.2,2.4,2.3,2.3,
			2.5,2.9,2.5,3.1,
			2.5,2.1,2.5,1.9,
		],
		# C  A
		# G AT
		[
			1.5,1.8,1.6,2.1,
			1.9,2.1,1.8,1.9,
			1.6,1.4,1.6,2.0,
			2.9,2.4,2.7,2.2,
		],
		# C  C
		# G AG
		[
			1.0,1.3,1.1,1.6,
			1.6,1.8,1.5,1.6,
			1.2,1.0,1.2,1.6,
			2.4,1.9,2.2,1.7,
		],
		# C  G
		# G AC
		[
			1.1,1.4,1.2,1.7,
			1.7,1.9,1.6,1.7,
			1.3,1.1,1.3,1.7,
			2.5,2.0,2.3,1.8,
		],
		# C  T
		# G AA
		[
			1.4,1.7,1.5,2.0,
			1.9,2.1,1.8,1.9,
			1.6,1.4,1.6,2.0,
			2.9,2.4,2.7,2.2,
		],
		# C  A
		# G CT
		[
			1.6,1.9,1.7,2.2,
			2.1,2.3,2.0,2.1,
			1.7,1.5,1.7,2.1,
			2.5,2.0,2.3,1.8,
		],
		# C  C
		# G CG
		[
			1.3,1.6,1.4,1.9,
			1.8,2.0,1.7,1.8,
			0.9,0.7,0.9,1.3,
			2.2,1.7,2.0,1.5,
		],
		# C  G
		# G CC
		[
			1.4,1.7,1.5,2.0,
			1.9,2.1,1.8,1.9,
			1.4,1.2,1.4,1.8,
			2.2,1.7,2.0,1.5,
		],
		# C  T
		# G CA
		[
			1.6,1.9,1.7,2.2,
			2.1,2.3,2.0,2.1,
			1.8,1.6,1.8,2.2,
			2.5,2.0,2.3,1.8,
		],
		# C  A
		# G GT
		[
			1.5,1.8,1.6,2.1,
			2.4,2.6,2.3,2.4,
			1.6,1.4,1.6,2.0,
			2.9,2.4,2.7,2.2,
		],
		# C  C
		# G GG
		[
			1.1,1.4,1.2,1.7,
			1.6,1.8,1.5,1.6,
			1.2,1.0,1.2,1.6,
			2.6,2.1,2.4,1.9,
		],
		# C  G
		# G GC
		[
			1.2,1.5,1.3,1.8,
			1.3,1.5,1.2,1.3,
			1.3,1.1,1.3,1.7,
			2.4,1.9,2.2,1.7,
		],
		# C  T
		# G GA
		[
			1.5,1.8,1.6,2.1,
			2.2,2.4,2.1,2.2,
			1.6,1.4,1.6,2.0,
			2.9,2.4,2.7,2.2,
		],
		# C  A
		# G TT
		[
			2.1,2.4,2.2,2.7,
			2.0,2.2,1.9,2.0,
			2.1,1.9,2.1,2.5,
			2.3,1.8,2.1,1.6,
		],
		# C  C
		# G TG
		[
			1.7,2.0,1.8,2.3,
			1.7,1.9,1.6,1.7,
			1.8,1.6,1.8,2.2,
			2.0,1.5,1.8,1.3,
		],
		# C  G
		# G TC
		[
			1.9,2.2,2.0,2.5,
			1.7,1.9,1.6,1.7,
			1.8,1.6,1.8,2.2,
			2.0,1.5,1.8,1.3,
		],
		# C  T
		# G TA
		[
			2.1,2.4,2.2,2.7,
			2.0,2.2,1.9,2.0,
			2.2,2.0,2.2,2.6,
			2.3,1.8,2.1,1.6,
		],
		# G  A
		# C AT
		[
			1.4,1.7,1.5,2.0,
			1.8,2.0,1.3,1.9,
			1.5,1.7,1.5,2.2,
			2.7,2.4,2.7,2.2,
		],
		# G  C
		# C AG
		[
			0.9,1.2,1.0,1.5,
			1.5,1.7,1.0,1.6,
			1.1,1.3,1.1,1.8,
			2.2,1.9,2.2,1.7,
		],
		# G  G
		# C AC
		[
			1.0,1.3,1.1,1.6,
			1.6,1.8,1.1,1.7,
			1.2,1.4,1.2,1.9,
			2.3,2.0,2.3,1.8,
		],
		# G  T
		# C AA
		[
			1.3,1.6,1.4,1.9,
			1.8,2.0,1.3,1.9,
			1.5,1.7,1.5,2.2,
			2.7,2.4,2.7,2.2,
		],
		# G  A
		# C CT
		[
			1.5,1.8,1.6,2.1,
			2.0,2.2,1.5,2.1,
			1.6,1.8,1.6,2.3,
			2.3,2.0,2.3,1.8,
		],
		# G  C
		# C CG
		[
			1.2,1.5,1.3,1.8,
			1.7,1.9,1.2,1.8,
			0.8,1.0,0.8,1.5,
			2.0,1.7,2.0,1.5,
		],
		# G  G
		# C CC
		[
			1.3,1.6,1.4,1.9,
			1.8,2.0,1.3,1.9,
			1.3,1.5,1.3,2.0,
			2.0,1.7,2.0,1.5,
		],
		# G  T
		# C CA
		[
			1.5,1.8,1.6,2.1,
			2.0,2.2,1.5,2.1,
			1.7,1.9,1.7,2.4,
			2.3,2.0,2.3,1.8,
		],
		# G  A
		# C GT
		[
			1.4,1.7,1.5,2.0,
			2.3,2.5,1.8,2.4,
			1.5,1.7,1.5,2.2,
			2.7,2.4,2.7,2.2,
		],
		# G  C
		# C GG
		[
			1.0,1.3,1.1,1.6,
			1.5,1.7,1.0,1.6,
			1.1,1.3,1.1,1.8,
			2.4,2.1,2.4,1.9,
		],
		# G  G
		# C GC
		[
			1.1,1.4,1.2,1.7,
			1.2,1.4,0.7,1.3,
			1.2,1.4,1.2,1.9,
			2.2,1.9,2.2,1.7,
		],
		# G  T
		# C GA
		[
			1.4,1.7,1.5,2.0,
			2.1,2.3,1.6,2.2,
			1.5,1.7,1.5,2.2,
			2.7,2.4,2.7,2.2,
		],
		# G  A
		# C TT
		[
			2.0,2.3,2.1,2.6,
			1.9,2.1,1.4,2.0,
			2.0,2.2,2.0,2.7,
			2.1,1.8,2.1,1.6,
		],
		# G  C
		# C TG
		[
			1.6,1.9,1.7,2.2,
			1.6,1.8,1.1,1.7,
			1.7,1.9,1.7,2.4,
			1.8,1.5,1.8,1.3,
		],
		# G  G
		# C TC
		[
			1.8,2.1,1.9,2.4,
			1.6,1.8,1.1,1.7,
			1.7,1.9,1.7,2.4,
			1.8,1.5,1.8,1.3,
		],
		# G  T
		# C TA
		[
			2.0,2.3,2.1,2.6,
			1.9,2.1,1.4,2.0,
			2.1,2.3,2.1,2.8,
			2.1,1.8,2.1,1.6,
		],
		# T  A
		# A AT
		[
			1.9,2.0,1.9,2.5,
			2.1,2.3,2.1,2.2,
			1.9,2.5,1.9,2.5,
			3.1,2.7,3.0,2.5,
		],
		# T  C
		# A AG
		[
			1.4,1.5,1.4,2.0,
			1.8,2.0,1.8,1.9,
			1.5,2.1,1.5,2.1,
			2.6,2.2,2.5,2.0,
		],
		# T  G
		# A AC
		[
			1.5,1.6,1.5,2.1,
			1.9,2.1,1.9,2.0,
			1.6,2.2,1.6,2.2,
			2.7,2.3,2.6,2.1,
		],
		# T  T
		# A AA
		[
			1.8,1.9,1.8,2.4,
			2.1,2.3,2.1,2.2,
			1.9,2.5,1.9,2.5,
			3.1,2.7,3.0,2.5,
		],
		# T  A
		# A CT
		[
			2.0,2.1,2.0,2.6,
			2.3,2.5,2.3,2.4,
			2.0,2.6,2.0,2.6,
			2.7,2.3,2.6,2.1,
		],
		# T  C
		# A CG
		[
			1.7,1.8,1.7,2.3,
			2.0,2.2,2.0,2.1,
			1.2,1.8,1.2,1.8,
			2.4,2.0,2.3,1.8,
		],
		# T  G
		# A CC
		[
			1.8,1.9,1.8,2.4,
			2.1,2.3,2.1,2.2,
			1.7,2.3,1.7,2.3,
			2.4,2.0,2.3,1.8,
		],
		# T  T
		# A CA
		[
			2.0,2.1,2.0,2.6,
			2.3,2.5,2.3,2.4,
			2.1,2.7,2.1,2.7,
			2.7,2.3,2.6,2.1,
		],
		# T  A
		# A GT
		[
			1.9,2.0,1.9,2.5,
			2.6,2.8,2.6,2.7,
			1.9,2.5,1.9,2.5,
			3.1,2.7,3.0,2.5,
		],
		# T  C
		# A GG
		[
			1.5,1.6,1.5,2.1,
			1.8,2.0,1.8,1.9,
			1.5,2.1,1.5,2.1,
			2.8,2.4,2.7,2.2,
		],
		# T  G
		# A GC
		[
			1.6,1.7,1.6,2.2,
			1.5,1.7,1.5,1.6,
			1.6,2.2,1.6,2.2,
			2.6,2.2,2.5,2.0,
		],
		# T  T
		# A GA
		[
			1.9,2.0,1.9,2.5,
			2.4,2.6,2.4,2.5,
			1.9,2.5,1.9,2.5,
			3.1,2.7,3.0,2.5,
		],
		# T  A
		# A TT
		[
			2.5,2.6,2.5,3.1,
			2.2,2.4,2.2,2.3,
			2.4,3.0,2.4,3.0,
			2.5,2.1,2.4,1.9,
		],
		# T  C
		# A TG
		[
			2.1,2.2,2.1,2.7,
			1.9,2.1,1.9,2.0,
			2.1,2.7,2.1,2.7,
			2.2,1.8,2.1,1.6,
		],
		# T  G
		# A TC
		[
			2.3,2.4,2.3,2.9,
			1.9,2.1,1.9,2.0,
			2.1,2.7,2.1,2.7,
			2.2,1.8,2.1,1.6,
		],
		# T  T
		# A TA
		[
			2.5,2.6,2.5,3.1,
			2.2,2.4,2.2,2.3,
			2.5,3.1,2.5,3.1,
			2.5,2.1,2.4,1.9,
		],
])

    int_loop_energy_dict["21dh"] = deque([
		# A  A
		# T AT
		[
			31.8,31.8,29.6,31.8,
			29.3,29.3,29.3,29.3,
			20.7,20.7,20.7,20.7,
			29.3,29.3,29.3,14.1,
		],
		# A  C
		# T AG
		[
			28.9,29.8,27.8,29.8,
			23.0,23.0,23.0,20.2,
			23.4,23.4,13.9,23.4,
			23.0,23.0,23.0,19.4,
		],
		# A  G
		# T AC
		[
			23.9,23.9,12.6,23.9,
			24.2,24.2,24.2,14.0,
			16.7,16.7,16.7,16.7,
			24.2,6.6,24.2,11.4,
		],
		# A  T
		# T AA
		[
			23.8,28.7,26.0,23.8,
			28.7,28.7,28.7,23.2,
			26.0,26.0,26.0,26.0,
			28.7,23.2,28.7,28.7,
		],
		# A  A
		# T CT
		[
			31.8,20.4,29.6,20.4,
			29.3,33.6,29.3,17.3,
			20.7,20.4,20.5,20.4,
			29.3,22.4,29.3,14.1,
		],
		# A  C
		# T CG
		[
			29.8,29.8,27.8,29.8,
			23.0,31.7,23.0,20.2,
			23.4,29.8,13.9,29.8,
			23.0,30.5,23.0,19.4,
		],
		# A  G
		# T CC
		[
			22.8,22.8,12.6,22.8,
			24.2,21.5,24.2,14.0,
			16.7,22.8,9.0,22.8,
			6.6,6.6,6.6,6.6,
		],
		# A  T
		# T CA
		[
			28.7,28.7,26.0,28.7,
			28.7,26.4,28.7,23.2,
			26.0,28.7,23.0,28.7,
			23.2,23.2,23.2,23.2,
		],
		# A  A
		# T GT
		[
			29.6,29.6,29.6,29.6,
			29.3,29.3,29.3,29.3,
			20.7,20.5,20.5,20.5,
			29.3,29.3,29.3,14.1,
		],
		# A  C
		# T GG
		[
			27.8,27.8,27.8,27.8,
			23.0,23.0,23.0,20.2,
			13.9,13.9,13.9,13.9,
			23.0,23.0,23.0,19.4,
		],
		# A  G
		# T GC
		[
			12.6,12.6,12.6,12.6,
			24.2,24.2,24.2,14.0,
			16.7,9.0,9.0,9.0,
			24.2,6.6,24.2,11.4,
		],
		# A  T
		# T GA
		[
			26.0,26.0,26.0,26.0,
			28.7,28.7,28.7,23.2,
			26.0,23.0,23.0,23.0,
			28.7,23.2,28.7,28.7,
		],
		# A  A
		# T TT
		[
			31.8,20.4,29.6,20.4,
			17.3,17.3,17.3,17.3,
			20.7,20.4,20.5,20.4,
			14.1,14.1,14.1,14.1,
		],
		# A  C
		# T TG
		[
			29.8,29.8,27.8,29.8,
			20.2,20.2,20.2,20.2,
			23.4,29.8,13.9,29.8,
			19.4,19.4,19.4,19.4,
		],
		# A  G
		# T TC
		[
			22.8,22.8,12.6,22.8,
			14.0,14.0,14.0,14.0,
			16.7,22.8,9.0,22.8,
			11.4,6.6,11.4,11.4,
		],
		# A  T
		# T TA
		[
			28.7,28.7,26.0,28.7,
			23.2,23.2,23.2,23.2,
			26.0,28.7,23.0,28.7,
			28.7,23.2,28.7,24.6,
		],
		# C  A
		# G AT
		[
			28.9,28.9,30.2,28.9,
			28.5,28.5,28.5,19.0,
			25.8,25.8,17.8,25.8,
			28.5,21.9,28.5,19.6,
		],
		# C  C
		# G AG
		[
			18.3,23.5,20.2,23.5,
			28.2,28.2,28.2,20.8,
			22.8,22.8,18.0,22.8,
			28.2,19.4,28.2,21.0,
		],
		# C  G
		# G AC
		[
			22.9,22.9,25.0,22.9,
			24.0,24.0,24.0,20.5,
			25.0,25.0,25.0,25.0,
			24.0,20.5,24.0,16.2,
		],
		# C  T
		# G AA
		[
			23.9,24.2,16.7,24.2,
			22.8,22.8,22.8,6.6,
			12.6,12.6,9.0,12.6,
			22.8,14.0,22.8,11.4,
		],
		# C  A
		# G CT
		[
			28.9,32.1,30.2,32.1,
			28.5,24.8,28.5,19.0,
			25.8,32.1,17.8,32.1,
			21.9,21.9,21.9,19.6,
		],
		# C  C
		# G CG
		[
			23.5,23.5,20.2,23.5,
			28.2,26.4,28.2,20.8,
			22.8,23.5,18.0,23.5,
			19.4,19.4,19.4,19.4,
		],
		# C  G
		# G CC
		[
			22.9,24.0,25.0,24.0,
			24.0,23.0,24.0,20.5,
			25.0,24.0,19.0,24.0,
			20.5,20.5,20.5,16.2,
		],
		# C  T
		# G CA
		[
			24.2,24.2,16.7,24.2,
			22.8,21.5,22.8,6.6,
			12.6,24.2,9.0,24.2,
			14.0,14.0,14.0,11.4,
		],
		# C  A
		# G GT
		[
			30.2,30.2,30.2,30.2,
			28.5,28.5,28.5,19.0,
			17.8,17.8,17.8,17.8,
			28.5,21.9,28.5,19.6,
		],
		# C  C
		# G GG
		[
			20.2,20.2,20.2,20.2,
			28.2,28.2,28.2,20.8,
			18.0,18.0,18.0,18.0,
			28.2,19.4,28.2,21.0,
		],
		# C  G
		# G GC
		[
			25.0,25.0,25.0,25.0,
			24.0,24.0,24.0,20.5,
			25.0,19.0,19.0,19.0,
			24.0,20.5,24.0,16.2,
		],
		# C  T
		# G GA
		[
			16.7,16.7,16.7,16.7,
			22.8,22.8,22.8,6.6,
			9.0,9.0,9.0,9.0,
			22.8,14.0,22.8,11.4,
		],
		# C  A
		# G TT
		[
			28.9,32.1,30.2,32.1,
			19.0,19.0,19.0,19.0,
			25.8,32.1,17.8,32.1,
			19.6,19.6,19.6,19.6,
		],
		# C  C
		# G TG
		[
			23.5,23.5,20.2,23.5,
			20.8,20.8,20.8,20.8,
			22.8,23.5,18.0,23.5,
			21.0,21.0,21.0,21.0,
		],
		# C  G
		# G TC
		[
			22.9,24.0,25.0,24.0,
			20.5,20.5,20.5,20.5,
			25.0,24.0,19.0,24.0,
			16.2,16.2,16.2,16.2,
		],
		# C  T
		# G TA
		[
			24.2,24.2,16.7,24.2,
			6.6,6.6,6.6,6.6,
			12.6,24.2,9.0,24.2,
			11.4,11.4,11.4,11.4,
		],
		# G  A
		# C AT
		[
			17.5,17.5,17.5,17.5,
			23.1,23.1,23.1,23.1,
			25.8,25.8,25.8,25.8,
			23.1,23.1,23.1,8.9,
		],
		# G  C
		# C AG
		[
			21.5,21.5,21.3,21.5,
			22.8,22.8,22.8,22.8,
			21.3,21.3,16.1,21.3,
			22.8,22.8,22.8,22.8,
		],
		# G  G
		# C AC
		[
			18.3,18.3,22.8,18.3,
			23.5,23.5,23.5,23.5,
			20.2,20.2,20.2,20.2,
			23.5,23.5,23.5,23.5,
		],
		# G  T
		# C AA
		[
			28.9,23.0,23.4,23.0,
			29.8,29.8,29.8,29.8,
			27.8,27.8,13.9,27.8,
			29.8,20.2,29.8,19.4,
		],
		# G  A
		# C CT
		[
			17.5,32.1,30.2,32.1,
			23.1,31.8,23.1,18.5,
			25.8,32.1,22.3,32.1,
			23.1,22.6,23.1,8.9,
		],
		# G  C
		# C CG
		[
			21.5,22.8,21.3,22.8,
			22.8,24.9,22.8,18.3,
			21.3,22.8,16.1,22.8,
			22.8,18.3,22.8,18.3,
		],
		# G  G
		# C CC
		[
			18.3,28.2,22.8,28.2,
			23.5,26.4,23.5,19.4,
			20.2,28.2,18.0,28.2,
			23.5,20.8,23.5,21.0,
		],
		# G  T
		# C CA
		[
			23.0,23.0,23.4,23.0,
			29.8,31.7,29.8,30.5,
			27.8,23.0,13.9,23.0,
			20.2,20.2,20.2,20.2,
		],
		# G  A
		# C GT
		[
			30.2,30.2,30.2,30.2,
			23.1,23.1,23.1,23.1,
			25.8,22.3,22.3,22.3,
			23.1,23.1,23.1,8.9,
		],
		# G  C
		# C GG
		[
			21.3,21.3,21.3,21.3,
			22.8,22.8,22.8,22.8,
			16.1,16.1,16.1,16.1,
			22.8,22.8,22.8,22.8,
		],
		# G  G
		# C GC
		[
			22.8,22.8,22.8,22.8,
			23.5,23.5,23.5,23.5,
			20.2,18.0,18.0,18.0,
			23.5,23.5,23.5,23.5,
		],
		# G  T
		# C GA
		[
			23.4,23.4,23.4,23.4,
			29.8,29.8,29.8,29.8,
			13.9,13.9,13.9,13.9,
			29.8,20.2,29.8,19.4,
		],
		# G  A
		# C TT
		[
			17.5,32.1,30.2,32.1,
			23.1,18.5,23.1,18.5,
			25.8,32.1,22.3,32.1,
			8.9,8.9,8.9,8.9,
		],
		# G  C
		# C TG
		[
			21.5,22.8,21.3,22.8,
			22.8,18.3,22.8,18.3,
			21.3,22.8,16.1,22.8,
			22.8,18.3,22.8,19.2,
		],
		# G  G
		# C TC
		[
			18.3,28.2,22.8,28.2,
			23.5,19.4,23.5,19.4,
			20.2,28.2,18.0,28.2,
			23.5,21.0,23.5,21.0,
		],
		# G  T
		# C TA
		[
			23.0,23.0,23.4,23.0,
			29.8,30.5,29.8,30.5,
			27.8,23.0,13.9,23.0,
			19.4,19.4,19.4,19.4,
		],
		# T  A
		# A AT
		[
			31.0,31.0,30.8,31.0,
			33.2,33.2,33.2,21.4,
			30.8,30.8,30.8,30.8,
			33.2,21.4,33.2,25.1,
		],
		# T  C
		# A AG
		[
			17.5,17.5,25.8,17.5,
			32.1,32.1,32.1,32.1,
			30.2,30.2,22.3,30.2,
			32.1,18.5,32.1,8.9,
		],
		# T  G
		# A AC
		[
			28.9,28.9,25.8,28.9,
			32.1,32.1,32.1,21.9,
			30.2,30.2,17.8,30.2,
			32.1,19.0,32.1,19.6,
		],
		# T  T
		# A AA
		[
			31.8,29.3,20.7,29.3,
			20.4,20.4,20.4,22.4,
			29.6,29.6,20.5,29.6,
			20.4,17.3,20.4,14.1,
		],
		# T  A
		# A CT
		[
			31.0,33.2,30.8,33.2,
			33.2,36.3,33.2,21.4,
			30.8,33.2,27.3,33.2,
			21.4,21.4,21.4,21.4,
		],
		# T  C
		# A CG
		[
			17.5,23.1,25.8,23.1,
			32.1,31.8,32.1,31.8,
			30.2,23.1,22.3,23.1,
			18.5,18.5,18.5,8.9,
		],
		# T  G
		# A CC
		[
			28.5,28.5,25.8,28.5,
			32.1,24.8,32.1,21.9,
			30.2,28.5,17.8,28.5,
			19.0,19.0,19.0,19.6,
		],
		# T  T
		# A CA
		[
			29.3,29.3,20.7,29.3,
			20.4,33.6,20.4,22.4,
			29.6,29.3,20.5,29.3,
			17.3,17.3,17.3,14.1,
		],
		# T  A
		# A GT
		[
			30.8,30.8,30.8,30.8,
			33.2,33.2,33.2,21.4,
			30.8,27.3,27.3,27.3,
			33.2,21.4,33.2,25.1,
		],
		# T  C
		# A GG
		[
			25.8,25.8,25.8,25.8,
			32.1,32.1,32.1,32.1,
			22.3,22.3,22.3,22.3,
			32.1,18.5,32.1,8.9,
		],
		# T  G
		# A GC
		[
			25.8,25.8,25.8,25.8,
			32.1,32.1,32.1,21.9,
			17.8,17.8,17.8,17.8,
			32.1,19.0,32.1,19.6,
		],
		# T  T
		# A GA
		[
			20.7,20.7,20.7,20.7,
			20.4,20.4,20.4,22.4,
			20.5,20.5,20.5,20.5,
			20.4,17.3,20.4,14.1,
		],
		# T  A
		# A TT
		[
			31.0,33.2,30.8,33.2,
			21.4,21.4,21.4,21.4,
			30.8,33.2,27.3,33.2,
			25.1,21.4,25.1,25.1,
		],
		# T  C
		# A TG
		[
			17.5,23.1,25.8,23.1,
			32.1,22.6,32.1,22.6,
			30.2,23.1,22.3,23.1,
			8.9,8.9,8.9,8.9,
		],
		# T  G
		# A TC
		[
			28.5,28.5,25.8,28.5,
			21.9,21.9,21.9,21.9,
			30.2,28.5,17.8,28.5,
			19.6,19.6,19.6,19.6,
		],
		# T  T
		# A TA
		[
			29.3,29.3,20.7,29.3,
			22.4,22.4,22.4,22.4,
			29.6,29.3,20.5,29.3,
			14.1,14.1,14.1,14.1,
		],
])

    int_loop_energy_dict["22dg"] = deque([
		# A A
		# T T
		[
			1.8,1.9,1.8,2.4,1.9,2.1,2.4,2.0,1.8,1.9,1.8,2.3,2.4,2.0,2.4,1.8,
			2.0,2.1,2.0,2.6,2.1,2.3,2.6,2.2,2.0,2.1,2.0,2.5,2.6,2.2,2.6,2.0,
			1.9,2.0,1.9,2.5,2.0,2.2,2.5,2.1,1.9,2.0,1.9,2.4,2.5,2.1,2.5,1.9,
			2.5,2.6,2.5,3.1,2.6,2.8,3.1,2.7,2.5,2.6,2.5,3.0,3.1,2.7,3.1,2.5,
			2.0,2.1,2.0,2.6,2.1,2.3,2.6,2.2,2.0,2.1,2.0,2.5,2.6,2.2,2.6,2.0,
			2.2,2.3,2.2,2.8,2.3,2.5,2.8,2.4,2.2,2.3,2.2,2.7,2.8,2.4,2.8,2.2,
			2.1,2.2,2.1,2.7,2.2,2.4,2.7,2.3,2.1,2.2,2.1,2.6,2.7,2.3,2.7,2.1,
			2.1,2.2,2.1,2.7,2.2,2.4,2.7,2.3,2.1,2.2,2.1,2.6,2.7,2.3,2.7,2.1,
			1.9,2.0,1.9,2.5,2.0,2.2,2.5,2.1,1.9,2.0,1.9,2.4,2.5,2.1,2.5,1.9,
			2.3,2.4,2.3,2.9,2.4,2.6,2.9,2.5,2.3,2.4,2.3,2.8,2.9,2.5,2.9,2.3,
			1.9,2.0,1.9,2.5,2.0,2.2,2.5,2.1,1.9,2.0,1.9,2.4,2.5,2.1,2.5,1.9,
			2.5,2.6,2.5,3.1,2.6,2.8,3.1,2.7,2.5,2.6,2.5,3.0,3.1,2.7,3.1,2.5,
			2.5,2.6,2.5,3.1,2.6,2.8,3.1,2.7,2.5,2.6,2.5,3.0,3.1,2.7,3.1,2.5,
			2.1,2.2,2.1,2.7,2.2,2.4,2.7,2.3,2.1,2.2,2.1,2.6,2.7,2.3,2.7,2.1,
			2.5,2.6,2.5,3.1,2.6,2.8,3.1,2.7,2.5,2.6,2.5,3.0,3.1,2.7,3.1,2.5,
			1.9,2.0,1.9,2.5,2.0,2.2,2.5,2.1,1.9,2.0,1.9,2.4,2.5,2.1,2.5,1.9,
		],
		# A C
		# T G
		[
			1.3,1.6,1.4,2.0,1.6,1.8,1.6,1.7,1.4,1.1,1.4,2.0,1.9,1.7,2.1,1.5,
			1.5,1.8,1.6,2.2,1.8,2.0,1.8,1.9,1.6,1.3,1.6,2.2,2.1,1.9,2.3,1.7,
			1.4,1.7,1.5,2.1,1.7,1.9,1.7,1.8,1.5,1.2,1.5,2.1,2.0,1.8,2.2,1.6,
			2.0,2.3,2.1,2.7,2.3,2.5,2.3,2.4,2.1,1.8,2.1,2.7,2.6,2.4,2.8,2.2,
			1.5,1.8,1.6,2.2,1.8,2.0,1.8,1.9,1.6,1.3,1.6,2.2,2.1,1.9,2.3,1.7,
			1.7,2.0,1.8,2.4,2.0,2.2,2.0,2.1,1.8,1.5,1.8,2.4,2.3,2.1,2.5,1.9,
			1.6,1.9,1.7,2.3,1.9,2.1,1.9,2.0,1.7,1.4,1.7,2.3,2.2,2.0,2.4,1.8,
			1.6,1.9,1.7,2.3,1.9,2.1,1.9,2.0,1.7,1.4,1.7,2.3,2.2,2.0,2.4,1.8,
			1.4,1.7,1.5,2.1,1.7,1.9,1.7,1.8,1.5,1.2,1.5,2.1,2.0,1.8,2.2,1.6,
			1.8,2.1,1.9,2.5,2.1,2.3,2.1,2.2,1.9,1.6,1.9,2.5,2.4,2.2,2.6,2.0,
			1.4,1.7,1.5,2.1,1.7,1.9,1.7,1.8,1.5,1.2,1.5,2.1,2.0,1.8,2.2,1.6,
			2.0,2.3,2.1,2.7,2.3,2.5,2.3,2.4,2.1,1.8,2.1,2.7,2.6,2.4,2.8,2.2,
			2.0,2.3,2.1,2.7,2.3,2.5,2.3,2.4,2.1,1.8,2.1,2.7,2.6,2.4,2.8,2.2,
			1.6,1.9,1.7,2.3,1.9,2.1,1.9,2.0,1.7,1.4,1.7,2.3,2.2,2.0,2.4,1.8,
			2.0,2.3,2.1,2.7,2.3,2.5,2.3,2.4,2.1,1.8,2.1,2.7,2.6,2.4,2.8,2.2,
			1.4,1.7,1.5,2.1,1.7,1.9,1.7,1.8,1.5,1.2,1.5,2.1,2.0,1.8,2.2,1.6,
		],
		# A G
		# T C
		[
			1.4,1.7,1.5,2.2,1.7,1.9,1.3,1.7,1.5,1.6,1.5,2.0,2.0,1.7,1.9,1.5,
			1.6,1.9,1.7,2.4,1.9,2.1,1.5,1.9,1.7,1.8,1.7,2.2,2.2,1.9,2.1,1.7,
			1.5,1.8,1.6,2.3,1.8,2.0,1.4,1.8,1.6,1.7,1.6,2.1,2.1,1.8,2.0,1.6,
			2.1,2.4,2.2,2.9,2.4,2.6,2.0,2.4,2.2,2.3,2.2,2.7,2.7,2.4,2.6,2.2,
			1.6,1.9,1.7,2.4,1.9,2.1,1.5,1.9,1.7,1.8,1.7,2.2,2.2,1.9,2.1,1.7,
			1.8,2.1,1.9,2.6,2.1,2.3,1.7,2.1,1.9,2.0,1.9,2.4,2.4,2.1,2.3,1.9,
			1.7,2.0,1.8,2.5,2.0,2.2,1.6,2.0,1.8,1.9,1.8,2.3,2.3,2.0,2.2,1.8,
			1.7,2.0,1.8,2.5,2.0,2.2,1.6,2.0,1.8,1.9,1.8,2.3,2.3,2.0,2.2,1.8,
			1.5,1.8,1.6,2.3,1.8,2.0,1.4,1.8,1.6,1.7,1.6,2.1,2.1,1.8,2.0,1.6,
			1.9,2.2,2.0,2.7,2.2,2.4,1.8,2.2,2.0,2.1,2.0,2.5,2.5,2.2,2.4,2.0,
			1.5,1.8,1.6,2.3,1.8,2.0,1.4,1.8,1.6,1.7,1.6,2.1,2.1,1.8,2.0,1.6,
			2.1,2.4,2.2,2.9,2.4,2.6,2.0,2.4,2.2,2.3,2.2,2.7,2.7,2.4,2.6,2.2,
			2.1,2.4,2.2,2.9,2.4,2.6,2.0,2.4,2.2,2.3,2.2,2.7,2.7,2.4,2.6,2.2,
			1.7,2.0,1.8,2.5,2.0,2.2,1.6,2.0,1.8,1.9,1.8,2.3,2.3,2.0,2.2,1.8,
			2.1,2.4,2.2,2.9,2.4,2.6,2.0,2.4,2.2,2.3,2.2,2.7,2.7,2.4,2.6,2.2,
			1.5,1.8,1.6,2.3,1.8,2.0,1.4,1.8,1.6,1.7,1.6,2.1,2.1,1.8,2.0,1.6,
		],
		# A T
		# T A
		[
			1.7,1.9,1.8,2.4,1.9,2.1,2.2,2.0,1.8,2.0,1.8,2.4,2.4,2.0,2.4,1.8,
			1.9,2.1,2.0,2.6,2.1,2.3,2.4,2.2,2.0,2.2,2.0,2.6,2.6,2.2,2.6,2.0,
			1.8,2.0,1.9,2.5,2.0,2.2,2.3,2.1,1.9,2.1,1.9,2.5,2.5,2.1,2.5,1.9,
			2.4,2.6,2.5,3.1,2.6,2.8,2.9,2.7,2.5,2.7,2.5,3.1,3.1,2.7,3.1,2.5,
			1.9,2.1,2.0,2.6,2.1,2.3,2.4,2.2,2.0,2.2,2.0,2.6,2.6,2.2,2.6,2.0,
			2.1,2.3,2.2,2.8,2.3,2.5,2.6,2.4,2.2,2.4,2.2,2.8,2.8,2.4,2.8,2.2,
			2.0,2.2,2.1,2.7,2.2,2.4,2.5,2.3,2.1,2.3,2.1,2.7,2.7,2.3,2.7,2.1,
			2.0,2.2,2.1,2.7,2.2,2.4,2.5,2.3,2.1,2.3,2.1,2.7,2.7,2.3,2.7,2.1,
			1.8,2.0,1.9,2.5,2.0,2.2,2.3,2.1,1.9,2.1,1.9,2.5,2.5,2.1,2.5,1.9,
			2.2,2.4,2.3,2.9,2.4,2.6,2.7,2.5,2.3,2.5,2.3,2.9,2.9,2.5,2.9,2.3,
			1.8,2.0,1.9,2.5,2.0,2.2,2.3,2.1,1.9,2.1,1.9,2.5,2.5,2.1,2.5,1.9,
			2.4,2.6,2.5,3.1,2.6,2.8,2.9,2.7,2.5,2.7,2.5,3.1,3.1,2.7,3.1,2.5,
			2.4,2.6,2.5,3.1,2.6,2.8,2.9,2.7,2.5,2.7,2.5,3.1,3.1,2.7,3.1,2.5,
			2.0,2.2,2.1,2.7,2.2,2.4,2.5,2.3,2.1,2.3,2.1,2.7,2.7,2.3,2.7,2.1,
			2.4,2.6,2.5,3.1,2.6,2.8,2.9,2.7,2.5,2.7,2.5,3.1,3.1,2.7,3.1,2.5,
			1.8,2.0,1.9,2.5,2.0,2.2,2.3,2.1,1.9,2.1,1.9,2.5,2.5,2.1,2.5,1.9,
		],
		# C A
		# G T
		[
			1.5,1.6,1.5,2.1,1.6,1.8,2.1,1.7,1.5,1.6,1.5,2.0,2.1,1.7,2.1,1.5,
			1.8,1.9,1.8,2.4,1.9,2.1,2.4,2.0,1.8,1.9,1.8,2.3,2.4,2.0,2.4,1.8,
			1.6,1.7,1.6,2.2,1.7,1.9,2.2,1.8,1.6,1.7,1.6,2.1,2.2,1.8,2.2,1.6,
			2.1,2.2,2.1,2.7,2.2,2.4,2.7,2.3,2.1,2.2,2.1,2.6,2.7,2.3,2.7,2.1,
			1.8,1.9,1.8,2.4,1.9,2.1,2.4,2.0,1.8,1.9,1.8,2.3,2.4,2.0,2.4,1.8,
			2.0,2.1,2.0,2.6,2.1,2.3,2.6,2.2,2.0,2.1,2.0,2.5,2.6,2.2,2.6,2.0,
			1.7,1.8,1.7,2.3,1.8,2.0,2.3,1.9,1.7,1.8,1.7,2.2,2.3,1.9,2.3,1.7,
			1.8,1.9,1.8,2.4,1.9,2.1,2.4,2.0,1.8,1.9,1.8,2.3,2.4,2.0,2.4,1.8,
			1.6,1.7,1.6,2.2,1.7,1.9,2.2,1.8,1.6,1.7,1.6,2.1,2.2,1.8,2.2,1.6,
			1.4,1.5,1.4,2.0,1.5,1.7,2.0,1.6,1.4,1.5,1.4,1.9,2.0,1.6,2.0,1.4,
			1.6,1.7,1.6,2.2,1.7,1.9,2.2,1.8,1.6,1.7,1.6,2.1,2.2,1.8,2.2,1.6,
			2.0,2.1,2.0,2.6,2.1,2.3,2.6,2.2,2.0,2.1,2.0,2.5,2.6,2.2,2.6,2.0,
			2.3,2.4,2.3,2.9,2.4,2.6,2.9,2.5,2.3,2.4,2.3,2.8,2.9,2.5,2.9,2.3,
			1.8,1.9,1.8,2.4,1.9,2.1,2.4,2.0,1.8,1.9,1.8,2.3,2.4,2.0,2.4,1.8,
			2.1,2.2,2.1,2.7,2.2,2.4,2.7,2.3,2.1,2.2,2.1,2.6,2.7,2.3,2.7,2.1,
			1.6,1.7,1.6,2.2,1.7,1.9,2.2,1.8,1.6,1.7,1.6,2.1,2.2,1.8,2.2,1.6,
		],
		# C C
		# G G
		[
			1.0,1.3,1.1,1.7,1.3,1.5,1.3,1.4,1.1,0.8,1.1,1.7,1.6,1.4,1.8,1.2,
			1.3,1.6,1.4,2.0,1.6,1.8,1.6,1.7,1.4,1.1,1.4,2.0,1.9,1.7,2.1,1.5,
			1.1,1.4,1.2,1.8,1.4,1.6,1.4,1.5,1.2,0.9,1.2,1.8,1.7,1.5,1.9,1.3,
			1.6,1.9,1.7,2.3,1.9,2.1,1.9,2.0,1.7,1.4,1.7,2.3,2.2,2.0,2.4,1.8,
			1.3,1.6,1.4,2.0,1.6,1.8,1.6,1.7,1.4,1.1,1.4,2.0,1.9,1.7,2.1,1.5,
			1.5,1.8,1.6,2.2,1.8,2.0,1.8,1.9,1.6,1.3,1.6,2.2,2.1,1.9,2.3,1.7,
			1.2,1.5,1.3,1.9,1.5,1.7,1.5,1.6,1.3,1.0,1.3,1.9,1.8,1.6,2.0,1.4,
			1.3,1.6,1.4,2.0,1.6,1.8,1.6,1.7,1.4,1.1,1.4,2.0,1.9,1.7,2.1,1.5,
			1.1,1.4,1.2,1.8,1.4,1.6,1.4,1.5,1.2,0.9,1.2,1.8,1.7,1.5,1.9,1.3,
			0.9,1.2,1.0,1.6,1.2,1.4,1.2,1.3,1.0,0.7,1.0,1.6,1.5,1.3,1.7,1.1,
			1.1,1.4,1.2,1.8,1.4,1.6,1.4,1.5,1.2,0.9,1.2,1.8,1.7,1.5,1.9,1.3,
			1.5,1.8,1.6,2.2,1.8,2.0,1.8,1.9,1.6,1.3,1.6,2.2,2.1,1.9,2.3,1.7,
			1.8,2.1,1.9,2.5,2.1,2.3,2.1,2.2,1.9,1.6,1.9,2.5,2.4,2.2,2.6,2.0,
			1.3,1.6,1.4,2.0,1.6,1.8,1.6,1.7,1.4,1.1,1.4,2.0,1.9,1.7,2.1,1.5,
			1.6,1.9,1.7,2.3,1.9,2.1,1.9,2.0,1.7,1.4,1.7,2.3,2.2,2.0,2.4,1.8,
			1.1,1.4,1.2,1.8,1.4,1.6,1.4,1.5,1.2,0.9,1.2,1.8,1.7,1.5,1.9,1.3,
		],
		# C G
		# G C
		[
			1.1,1.4,1.2,1.9,1.4,1.6,1.0,1.4,1.2,1.3,1.2,1.7,1.7,1.4,1.6,1.2,
			1.4,1.7,1.5,2.2,1.7,1.9,1.3,1.7,1.5,1.6,1.5,2.0,2.0,1.7,1.9,1.5,
			1.2,1.5,1.3,2.0,1.5,1.7,1.1,1.5,1.3,1.4,1.3,1.8,1.8,1.5,1.7,1.3,
			1.7,2.0,1.8,2.5,2.0,2.2,1.6,2.0,1.8,1.9,1.8,2.3,2.3,2.0,2.2,1.8,
			1.4,1.7,1.5,2.2,1.7,1.9,1.3,1.7,1.5,1.6,1.5,2.0,2.0,1.7,1.9,1.5,
			1.6,1.9,1.7,2.4,1.9,2.1,1.5,1.9,1.7,1.8,1.7,2.2,2.2,1.9,2.1,1.7,
			1.3,1.6,1.4,2.1,1.6,1.8,1.2,1.6,1.4,1.5,1.4,1.9,1.9,1.6,1.8,1.4,
			1.4,1.7,1.5,2.2,1.7,1.9,1.3,1.7,1.5,1.6,1.5,2.0,2.0,1.7,1.9,1.5,
			1.2,1.5,1.3,2.0,1.5,1.7,1.1,1.5,1.3,1.4,1.3,1.8,1.8,1.5,1.7,1.3,
			1.0,1.3,1.1,1.8,1.3,1.5,0.9,1.3,1.1,1.2,1.1,1.6,1.6,1.3,1.5,1.1,
			1.2,1.5,1.3,2.0,1.5,1.7,1.1,1.5,1.3,1.4,1.3,1.8,1.8,1.5,1.7,1.3,
			1.6,1.9,1.7,2.4,1.9,2.1,1.5,1.9,1.7,1.8,1.7,2.2,2.2,1.9,2.1,1.7,
			1.9,2.2,2.0,2.7,2.2,2.4,1.8,2.2,2.0,2.1,2.0,2.5,2.5,2.2,2.4,2.0,
			1.4,1.7,1.5,2.2,1.7,1.9,1.3,1.7,1.5,1.6,1.5,2.0,2.0,1.7,1.9,1.5,
			1.7,2.0,1.8,2.5,2.0,2.2,1.6,2.0,1.8,1.9,1.8,2.3,2.3,2.0,2.2,1.8,
			1.2,1.5,1.3,2.0,1.5,1.7,1.1,1.5,1.3,1.4,1.3,1.8,1.8,1.5,1.7,1.3,
		],
		# C T
		# G A
		[
			1.4,1.6,1.5,2.1,1.6,1.8,1.9,1.7,1.5,1.7,1.5,2.1,2.1,1.7,2.1,1.5,
			1.7,1.9,1.8,2.4,1.9,2.1,2.2,2.0,1.8,2.0,1.8,2.4,2.4,2.0,2.4,1.8,
			1.5,1.7,1.6,2.2,1.7,1.9,2.0,1.8,1.6,1.8,1.6,2.2,2.2,1.8,2.2,1.6,
			2.0,2.2,2.1,2.7,2.2,2.4,2.5,2.3,2.1,2.3,2.1,2.7,2.7,2.3,2.7,2.1,
			1.7,1.9,1.8,2.4,1.9,2.1,2.2,2.0,1.8,2.0,1.8,2.4,2.4,2.0,2.4,1.8,
			1.9,2.1,2.0,2.6,2.1,2.3,2.4,2.2,2.0,2.2,2.0,2.6,2.6,2.2,2.6,2.0,
			1.6,1.8,1.7,2.3,1.8,2.0,2.1,1.9,1.7,1.9,1.7,2.3,2.3,1.9,2.3,1.7,
			1.7,1.9,1.8,2.4,1.9,2.1,2.2,2.0,1.8,2.0,1.8,2.4,2.4,2.0,2.4,1.8,
			1.5,1.7,1.6,2.2,1.7,1.9,2.0,1.8,1.6,1.8,1.6,2.2,2.2,1.8,2.2,1.6,
			1.3,1.5,1.4,2.0,1.5,1.7,1.8,1.6,1.4,1.6,1.4,2.0,2.0,1.6,2.0,1.4,
			1.5,1.7,1.6,2.2,1.7,1.9,2.0,1.8,1.6,1.8,1.6,2.2,2.2,1.8,2.2,1.6,
			1.9,2.1,2.0,2.6,2.1,2.3,2.4,2.2,2.0,2.2,2.0,2.6,2.6,2.2,2.6,2.0,
			2.2,2.4,2.3,2.9,2.4,2.6,2.7,2.5,2.3,2.5,2.3,2.9,2.9,2.5,2.9,2.3,
			1.7,1.9,1.8,2.4,1.9,2.1,2.2,2.0,1.8,2.0,1.8,2.4,2.4,2.0,2.4,1.8,
			2.0,2.2,2.1,2.7,2.2,2.4,2.5,2.3,2.1,2.3,2.1,2.7,2.7,2.3,2.7,2.1,
			1.5,1.7,1.6,2.2,1.7,1.9,2.0,1.8,1.6,1.8,1.6,2.2,2.2,1.8,2.2,1.6,
		],
		# G A
		# C T
		[
			1.4,1.5,1.4,2.0,1.5,1.7,2.0,1.6,1.4,1.5,1.4,1.9,2.0,1.6,2.0,1.4,
			1.7,1.8,1.7,2.3,1.8,2.0,2.3,1.9,1.7,1.8,1.7,2.2,2.3,1.9,2.3,1.7,
			1.5,1.6,1.5,2.1,1.6,1.8,2.1,1.7,1.5,1.6,1.5,2.0,2.1,1.7,2.1,1.5,
			2.0,2.1,2.0,2.6,2.1,2.3,2.6,2.2,2.0,2.1,2.0,2.5,2.6,2.2,2.6,2.0,
			1.7,1.8,1.7,2.3,1.8,2.0,2.3,1.9,1.7,1.8,1.7,2.2,2.3,1.9,2.3,1.7,
			1.9,2.0,1.9,2.5,2.0,2.2,2.5,2.1,1.9,2.0,1.9,2.4,2.5,2.1,2.5,1.9,
			1.2,1.3,1.2,1.8,1.3,1.5,1.8,1.4,1.2,1.3,1.2,1.7,1.8,1.4,1.8,1.2,
			1.8,1.9,1.8,2.4,1.9,2.1,2.4,2.0,1.8,1.9,1.8,2.3,2.4,2.0,2.4,1.8,
			1.5,1.6,1.5,2.1,1.6,1.8,2.1,1.7,1.5,1.6,1.5,2.0,2.1,1.7,2.1,1.5,
			1.7,1.8,1.7,2.3,1.8,2.0,2.3,1.9,1.7,1.8,1.7,2.2,2.3,1.9,2.3,1.7,
			1.5,1.6,1.5,2.1,1.6,1.8,2.1,1.7,1.5,1.6,1.5,2.0,2.1,1.7,2.1,1.5,
			2.2,2.3,2.2,2.8,2.3,2.5,2.8,2.4,2.2,2.3,2.2,2.7,2.8,2.4,2.8,2.2,
			2.1,2.2,2.1,2.7,2.2,2.4,2.7,2.3,2.1,2.2,2.1,2.6,2.7,2.3,2.7,2.1,
			1.8,1.9,1.8,2.4,1.9,2.1,2.4,2.0,1.8,1.9,1.8,2.3,2.4,2.0,2.4,1.8,
			2.1,2.2,2.1,2.7,2.2,2.4,2.7,2.3,2.1,2.2,2.1,2.6,2.7,2.3,2.7,2.1,
			1.6,1.7,1.6,2.2,1.7,1.9,2.2,1.8,1.6,1.7,1.6,2.1,2.2,1.8,2.2,1.6,
		],
		# G C
		# C G
		[
			0.9,1.2,1.0,1.6,1.2,1.4,1.2,1.3,1.0,0.7,1.0,1.6,1.5,1.3,1.7,1.1,
			1.2,1.5,1.3,1.9,1.5,1.7,1.5,1.6,1.3,1.0,1.3,1.9,1.8,1.6,2.0,1.4,
			1.0,1.3,1.1,1.7,1.3,1.5,1.3,1.4,1.1,0.8,1.1,1.7,1.6,1.4,1.8,1.2,
			1.5,1.8,1.6,2.2,1.8,2.0,1.8,1.9,1.6,1.3,1.6,2.2,2.1,1.9,2.3,1.7,
			1.2,1.5,1.3,1.9,1.5,1.7,1.5,1.6,1.3,1.0,1.3,1.9,1.8,1.6,2.0,1.4,
			1.4,1.7,1.5,2.1,1.7,1.9,1.7,1.8,1.5,1.2,1.5,2.1,2.0,1.8,2.2,1.6,
			0.7,1.0,0.8,1.4,1.0,1.2,1.0,1.1,0.8,0.5,0.8,1.4,1.3,1.1,1.5,0.9,
			1.3,1.6,1.4,2.0,1.6,1.8,1.6,1.7,1.4,1.1,1.4,2.0,1.9,1.7,2.1,1.5,
			1.0,1.3,1.1,1.7,1.3,1.5,1.3,1.4,1.1,0.8,1.1,1.7,1.6,1.4,1.8,1.2,
			1.2,1.5,1.3,1.9,1.5,1.7,1.5,1.6,1.3,1.0,1.3,1.9,1.8,1.6,2.0,1.4,
			1.0,1.3,1.1,1.7,1.3,1.5,1.3,1.4,1.1,0.8,1.1,1.7,1.6,1.4,1.8,1.2,
			1.7,2.0,1.8,2.4,2.0,2.2,2.0,2.1,1.8,1.5,1.8,2.4,2.3,2.1,2.5,1.9,
			1.6,1.9,1.7,2.3,1.9,2.1,1.9,2.0,1.7,1.4,1.7,2.3,2.2,2.0,2.4,1.8,
			1.3,1.6,1.4,2.0,1.6,1.8,1.6,1.7,1.4,1.1,1.4,2.0,1.9,1.7,2.1,1.5,
			1.6,1.9,1.7,2.3,1.9,2.1,1.9,2.0,1.7,1.4,1.7,2.3,2.2,2.0,2.4,1.8,
			1.1,1.4,1.2,1.8,1.4,1.6,1.4,1.5,1.2,0.9,1.2,1.8,1.7,1.5,1.9,1.3,
		],
		# G G
		# C C
		[
			1.0,1.3,1.1,1.8,1.3,1.5,0.9,1.3,1.1,1.2,1.1,1.6,1.6,1.3,1.5,1.1,
			1.3,1.6,1.4,2.1,1.6,1.8,1.2,1.6,1.4,1.5,1.4,1.9,1.9,1.6,1.8,1.4,
			1.1,1.4,1.2,1.9,1.4,1.6,1.0,1.4,1.2,1.3,1.2,1.7,1.7,1.4,1.6,1.2,
			1.6,1.9,1.7,2.4,1.9,2.1,1.5,1.9,1.7,1.8,1.7,2.2,2.2,1.9,2.1,1.7,
			1.3,1.6,1.4,2.1,1.6,1.8,1.2,1.6,1.4,1.5,1.4,1.9,1.9,1.6,1.8,1.4,
			1.5,1.8,1.6,2.3,1.8,2.0,1.4,1.8,1.6,1.7,1.6,2.1,2.1,1.8,2.0,1.6,
			0.8,1.1,0.9,1.6,1.1,1.3,0.7,1.1,0.9,1.0,0.9,1.4,1.4,1.1,1.3,0.9,
			1.4,1.7,1.5,2.2,1.7,1.9,1.3,1.7,1.5,1.6,1.5,2.0,2.0,1.7,1.9,1.5,
			1.1,1.4,1.2,1.9,1.4,1.6,1.0,1.4,1.2,1.3,1.2,1.7,1.7,1.4,1.6,1.2,
			1.3,1.6,1.4,2.1,1.6,1.8,1.2,1.6,1.4,1.5,1.4,1.9,1.9,1.6,1.8,1.4,
			1.1,1.4,1.2,1.9,1.4,1.6,1.0,1.4,1.2,1.3,1.2,1.7,1.7,1.4,1.6,1.2,
			1.8,2.1,1.9,2.6,2.1,2.3,1.7,2.1,1.9,2.0,1.9,2.4,2.4,2.1,2.3,1.9,
			1.7,2.0,1.8,2.5,2.0,2.2,1.6,2.0,1.8,1.9,1.8,2.3,2.3,2.0,2.2,1.8,
			1.4,1.7,1.5,2.2,1.7,1.9,1.3,1.7,1.5,1.6,1.5,2.0,2.0,1.7,1.9,1.5,
			1.7,2.0,1.8,2.5,2.0,2.2,1.6,2.0,1.8,1.9,1.8,2.3,2.3,2.0,2.2,1.8,
			1.2,1.5,1.3,2.0,1.5,1.7,1.1,1.5,1.3,1.4,1.3,1.8,1.8,1.5,1.7,1.3,
		],
		# G T
		# C A
		[
			1.3,1.5,1.4,2.0,1.5,1.7,1.8,1.6,1.4,1.6,1.4,2.0,2.0,1.6,2.0,1.4,
			1.6,1.8,1.7,2.3,1.8,2.0,2.1,1.9,1.7,1.9,1.7,2.3,2.3,1.9,2.3,1.7,
			1.4,1.6,1.5,2.1,1.6,1.8,1.9,1.7,1.5,1.7,1.5,2.1,2.1,1.7,2.1,1.5,
			1.9,2.1,2.0,2.6,2.1,2.3,2.4,2.2,2.0,2.2,2.0,2.6,2.6,2.2,2.6,2.0,
			1.6,1.8,1.7,2.3,1.8,2.0,2.1,1.9,1.7,1.9,1.7,2.3,2.3,1.9,2.3,1.7,
			1.8,2.0,1.9,2.5,2.0,2.2,2.3,2.1,1.9,2.1,1.9,2.5,2.5,2.1,2.5,1.9,
			1.1,1.3,1.2,1.8,1.3,1.5,1.6,1.4,1.2,1.4,1.2,1.8,1.8,1.4,1.8,1.2,
			1.7,1.9,1.8,2.4,1.9,2.1,2.2,2.0,1.8,2.0,1.8,2.4,2.4,2.0,2.4,1.8,
			1.4,1.6,1.5,2.1,1.6,1.8,1.9,1.7,1.5,1.7,1.5,2.1,2.1,1.7,2.1,1.5,
			1.6,1.8,1.7,2.3,1.8,2.0,2.1,1.9,1.7,1.9,1.7,2.3,2.3,1.9,2.3,1.7,
			1.4,1.6,1.5,2.1,1.6,1.8,1.9,1.7,1.5,1.7,1.5,2.1,2.1,1.7,2.1,1.5,
			2.1,2.3,2.2,2.8,2.3,2.5,2.6,2.4,2.2,2.4,2.2,2.8,2.8,2.4,2.8,2.2,
			2.0,2.2,2.1,2.7,2.2,2.4,2.5,2.3,2.1,2.3,2.1,2.7,2.7,2.3,2.7,2.1,
			1.7,1.9,1.8,2.4,1.9,2.1,2.2,2.0,1.8,2.0,1.8,2.4,2.4,2.0,2.4,1.8,
			2.0,2.2,2.1,2.7,2.2,2.4,2.5,2.3,2.1,2.3,2.1,2.7,2.7,2.3,2.7,2.1,
			1.5,1.7,1.6,2.2,1.7,1.9,2.0,1.8,1.6,1.8,1.6,2.2,2.2,1.8,2.2,1.6,
		],
		# T A
		# A T
		[
			1.9,2.0,1.9,2.5,2.0,2.2,2.5,2.1,1.9,2.0,1.9,2.4,2.5,2.1,2.5,1.9,
			2.0,2.1,2.0,2.6,2.1,2.3,2.6,2.2,2.0,2.1,2.0,2.5,2.6,2.2,2.6,2.0,
			1.9,2.0,1.9,2.5,2.0,2.2,2.5,2.1,1.9,2.0,1.9,2.4,2.5,2.1,2.5,1.9,
			2.5,2.6,2.5,3.1,2.6,2.8,3.1,2.7,2.5,2.6,2.5,3.0,3.1,2.7,3.1,2.5,
			2.0,2.1,2.0,2.6,2.1,2.3,2.6,2.2,2.0,2.1,2.0,2.5,2.6,2.2,2.6,2.0,
			2.2,2.3,2.2,2.8,2.3,2.5,2.8,2.4,2.2,2.3,2.2,2.7,2.8,2.4,2.8,2.2,
			2.0,2.1,2.0,2.6,2.1,2.3,2.6,2.2,2.0,2.1,2.0,2.5,2.6,2.2,2.6,2.0,
			2.1,2.2,2.1,2.7,2.2,2.4,2.7,2.3,2.1,2.2,2.1,2.6,2.7,2.3,2.7,2.1,
			1.9,2.0,1.9,2.5,2.0,2.2,2.5,2.1,1.9,2.0,1.9,2.4,2.5,2.1,2.5,1.9,
			2.5,2.6,2.5,3.1,2.6,2.8,3.1,2.7,2.5,2.6,2.5,3.0,3.1,2.7,3.1,2.5,
			1.9,2.0,1.9,2.5,2.0,2.2,2.5,2.1,1.9,2.0,1.9,2.4,2.5,2.1,2.5,1.9,
			2.5,2.6,2.5,3.1,2.6,2.8,3.1,2.7,2.5,2.6,2.5,3.0,3.1,2.7,3.1,2.5,
			2.5,2.6,2.5,3.1,2.6,2.8,3.1,2.7,2.5,2.6,2.5,3.0,3.1,2.7,3.1,2.5,
			2.1,2.2,2.1,2.7,2.2,2.4,2.7,2.3,2.1,2.2,2.1,2.6,2.7,2.3,2.7,2.1,
			2.4,2.5,2.4,3.0,2.5,2.7,3.0,2.6,2.4,2.5,2.4,2.9,3.0,2.6,3.0,2.4,
			1.9,2.0,1.9,2.5,2.0,2.2,2.5,2.1,1.9,2.0,1.9,2.4,2.5,2.1,2.5,1.9,
		],
		# T C
		# A G
		[
			1.4,1.7,1.5,2.1,1.7,1.9,1.7,1.8,1.5,1.2,1.5,2.1,2.0,1.8,2.2,1.6,
			1.5,1.8,1.6,2.2,1.8,2.0,1.8,1.9,1.6,1.3,1.6,2.2,2.1,1.9,2.3,1.7,
			1.4,1.7,1.5,2.1,1.7,1.9,1.7,1.8,1.5,1.2,1.5,2.1,2.0,1.8,2.2,1.6,
			2.0,2.3,2.1,2.7,2.3,2.5,2.3,2.4,2.1,1.8,2.1,2.7,2.6,2.4,2.8,2.2,
			1.5,1.8,1.6,2.2,1.8,2.0,1.8,1.9,1.6,1.3,1.6,2.2,2.1,1.9,2.3,1.7,
			1.7,2.0,1.8,2.4,2.0,2.2,2.0,2.1,1.8,1.5,1.8,2.4,2.3,2.1,2.5,1.9,
			1.5,1.8,1.6,2.2,1.8,2.0,1.8,1.9,1.6,1.3,1.6,2.2,2.1,1.9,2.3,1.7,
			1.6,1.9,1.7,2.3,1.9,2.1,1.9,2.0,1.7,1.4,1.7,2.3,2.2,2.0,2.4,1.8,
			1.4,1.7,1.5,2.1,1.7,1.9,1.7,1.8,1.5,1.2,1.5,2.1,2.0,1.8,2.2,1.6,
			2.0,2.3,2.1,2.7,2.3,2.5,2.3,2.4,2.1,1.8,2.1,2.7,2.6,2.4,2.8,2.2,
			1.4,1.7,1.5,2.1,1.7,1.9,1.7,1.8,1.5,1.2,1.5,2.1,2.0,1.8,2.2,1.6,
			2.0,2.3,2.1,2.7,2.3,2.5,2.3,2.4,2.1,1.8,2.1,2.7,2.6,2.4,2.8,2.2,
			2.0,2.3,2.1,2.7,2.3,2.5,2.3,2.4,2.1,1.8,2.1,2.7,2.6,2.4,2.8,2.2,
			1.6,1.9,1.7,2.3,1.9,2.1,1.9,2.0,1.7,1.4,1.7,2.3,2.2,2.0,2.4,1.8,
			1.9,2.2,2.0,2.6,2.2,2.4,2.2,2.3,2.0,1.7,2.0,2.6,2.5,2.3,2.7,2.1,
			1.4,1.7,1.5,2.1,1.7,1.9,1.7,1.8,1.5,1.2,1.5,2.1,2.0,1.8,2.2,1.6,
		],
		# T G
		# A C
		[
			1.5,1.8,1.6,2.3,1.8,2.0,1.4,1.8,1.6,1.7,1.6,2.1,2.1,1.8,2.0,1.6,
			1.6,1.9,1.7,2.4,1.9,2.1,1.5,1.9,1.7,1.8,1.7,2.2,2.2,1.9,2.1,1.7,
			1.5,1.8,1.6,2.3,1.8,2.0,1.4,1.8,1.6,1.7,1.6,2.1,2.1,1.8,2.0,1.6,
			2.1,2.4,2.2,2.9,2.4,2.6,2.0,2.4,2.2,2.3,2.2,2.7,2.7,2.4,2.6,2.2,
			1.6,1.9,1.7,2.4,1.9,2.1,1.5,1.9,1.7,1.8,1.7,2.2,2.2,1.9,2.1,1.7,
			1.8,2.1,1.9,2.6,2.1,2.3,1.7,2.1,1.9,2.0,1.9,2.4,2.4,2.1,2.3,1.9,
			1.6,1.9,1.7,2.4,1.9,2.1,1.5,1.9,1.7,1.8,1.7,2.2,2.2,1.9,2.1,1.7,
			1.7,2.0,1.8,2.5,2.0,2.2,1.6,2.0,1.8,1.9,1.8,2.3,2.3,2.0,2.2,1.8,
			1.5,1.8,1.6,2.3,1.8,2.0,1.4,1.8,1.6,1.7,1.6,2.1,2.1,1.8,2.0,1.6,
			2.1,2.4,2.2,2.9,2.4,2.6,2.0,2.4,2.2,2.3,2.2,2.7,2.7,2.4,2.6,2.2,
			1.5,1.8,1.6,2.3,1.8,2.0,1.4,1.8,1.6,1.7,1.6,2.1,2.1,1.8,2.0,1.6,
			2.1,2.4,2.2,2.9,2.4,2.6,2.0,2.4,2.2,2.3,2.2,2.7,2.7,2.4,2.6,2.2,
			2.1,2.4,2.2,2.9,2.4,2.6,2.0,2.4,2.2,2.3,2.2,2.7,2.7,2.4,2.6,2.2,
			1.7,2.0,1.8,2.5,2.0,2.2,1.6,2.0,1.8,1.9,1.8,2.3,2.3,2.0,2.2,1.8,
			2.0,2.3,2.1,2.8,2.3,2.5,1.9,2.3,2.1,2.2,2.1,2.6,2.6,2.3,2.5,2.1,
			1.5,1.8,1.6,2.3,1.8,2.0,1.4,1.8,1.6,1.7,1.6,2.1,2.1,1.8,2.0,1.6,
		],
		# T T
		# A A
		[
			1.8,2.0,1.9,2.5,2.0,2.2,2.3,2.1,1.9,2.1,1.9,2.5,2.5,2.1,2.5,1.9,
			1.9,2.1,2.0,2.6,2.1,2.3,2.4,2.2,2.0,2.2,2.0,2.6,2.6,2.2,2.6,2.0,
			1.8,2.0,1.9,2.5,2.0,2.2,2.3,2.1,1.9,2.1,1.9,2.5,2.5,2.1,2.5,1.9,
			2.4,2.6,2.5,3.1,2.6,2.8,2.9,2.7,2.5,2.7,2.5,3.1,3.1,2.7,3.1,2.5,
			1.9,2.1,2.0,2.6,2.1,2.3,2.4,2.2,2.0,2.2,2.0,2.6,2.6,2.2,2.6,2.0,
			2.1,2.3,2.2,2.8,2.3,2.5,2.6,2.4,2.2,2.4,2.2,2.8,2.8,2.4,2.8,2.2,
			1.9,2.1,2.0,2.6,2.1,2.3,2.4,2.2,2.0,2.2,2.0,2.6,2.6,2.2,2.6,2.0,
			2.0,2.2,2.1,2.7,2.2,2.4,2.5,2.3,2.1,2.3,2.1,2.7,2.7,2.3,2.7,2.1,
			1.8,2.0,1.9,2.5,2.0,2.2,2.3,2.1,1.9,2.1,1.9,2.5,2.5,2.1,2.5,1.9,
			2.4,2.6,2.5,3.1,2.6,2.8,2.9,2.7,2.5,2.7,2.5,3.1,3.1,2.7,3.1,2.5,
			1.8,2.0,1.9,2.5,2.0,2.2,2.3,2.1,1.9,2.1,1.9,2.5,2.5,2.1,2.5,1.9,
			2.4,2.6,2.5,3.1,2.6,2.8,2.9,2.7,2.5,2.7,2.5,3.1,3.1,2.7,3.1,2.5,
			2.4,2.6,2.5,3.1,2.6,2.8,2.9,2.7,2.5,2.7,2.5,3.1,3.1,2.7,3.1,2.5,
			2.0,2.2,2.1,2.7,2.2,2.4,2.5,2.3,2.1,2.3,2.1,2.7,2.7,2.3,2.7,2.1,
			2.3,2.5,2.4,3.0,2.5,2.7,2.8,2.6,2.4,2.6,2.4,3.0,3.0,2.6,3.0,2.4,
			1.8,2.0,1.9,2.5,2.0,2.2,2.3,2.1,1.9,2.1,1.9,2.5,2.5,2.1,2.5,1.9,
		],
])

    int_loop_energy_dict["22dh"] = deque([
		# A A
		# T T
		[
			6.3,6.3,6.3,6.3,6.6,6.6,6.6,6.6,4.7,4.7,4.7,4.7,-1.8,-1.8,-1.8,-1.8,
			7.5,7.5,7.5,7.5,7.8,7.8,7.8,7.8,5.9,5.9,5.9,5.9,-0.6,-0.6,-0.6,-0.6,
			7.0,7.0,7.0,7.0,7.3,7.3,7.3,7.3,5.4,5.4,5.4,5.4,-1.1,-1.1,-1.1,-1.1,
			6.6,6.6,6.6,6.6,6.9,6.9,6.9,6.9,5.0,5.0,5.0,5.0,-1.5,-1.5,-1.5,-1.5,
			6.3,6.3,6.3,6.3,6.6,6.6,6.6,6.6,4.7,4.7,4.7,4.7,-1.8,-1.8,-1.8,-1.8,
			7.5,7.5,7.5,7.5,7.8,7.8,7.8,7.8,5.9,5.9,5.9,5.9,-0.6,-0.6,-0.6,-0.6,
			7.0,7.0,7.0,7.0,7.3,7.3,7.3,7.3,5.4,5.4,5.4,5.4,-1.1,-1.1,-1.1,-1.1,
			6.6,6.6,6.6,6.6,6.9,6.9,6.9,6.9,5.0,5.0,5.0,5.0,-1.5,-1.5,-1.5,-1.5,
			6.3,6.3,6.3,6.3,6.6,6.6,6.6,6.6,4.7,4.7,4.7,4.7,-1.8,-1.8,-1.8,-1.8,
			7.5,7.5,7.5,7.5,7.8,7.8,7.8,7.8,5.9,5.9,5.9,5.9,-0.6,-0.6,-0.6,-0.6,
			7.0,7.0,7.0,7.0,7.3,7.3,7.3,7.3,5.4,5.4,5.4,5.4,-1.1,-1.1,-1.1,-1.1,
			6.6,6.6,6.6,6.6,6.9,6.9,6.9,6.9,5.0,5.0,5.0,5.0,-1.5,-1.5,-1.5,-1.5,
			6.3,6.3,6.3,6.3,6.6,6.6,6.6,6.6,4.7,4.7,4.7,4.7,-1.8,-1.8,-1.8,-1.8,
			7.5,7.5,7.5,7.5,7.8,7.8,7.8,7.8,5.9,5.9,5.9,5.9,-0.6,-0.6,-0.6,-0.6,
			7.0,7.0,7.0,7.0,7.3,7.3,7.3,7.3,5.4,5.4,5.4,5.4,-1.1,-1.1,-1.1,-1.1,
			6.6,6.6,6.6,6.6,6.9,6.9,6.9,6.9,5.0,5.0,5.0,5.0,-1.5,-1.5,-1.5,-1.5,
		],
		# A C
		# T G
		[
			-2.2,-2.2,-2.2,-2.2,0.7,0.7,0.7,0.7,-1.1,-1.1,-1.1,-1.1,3.1,3.1,3.1,3.1,
			-1.0,-1.0,-1.0,-1.0,1.9,1.9,1.9,1.9,0.1,0.1,0.1,0.1,4.3,4.3,4.3,4.3,
			-1.5,-1.5,-1.5,-1.5,1.4,1.4,1.4,1.4,-0.4,-0.4,-0.4,-0.4,3.8,3.8,3.8,3.8,
			-1.9,-1.9,-1.9,-1.9,1.0,1.0,1.0,1.0,-0.8,-0.8,-0.8,-0.8,3.4,3.4,3.4,3.4,
			-2.2,-2.2,-2.2,-2.2,0.7,0.7,0.7,0.7,-1.1,-1.1,-1.1,-1.1,3.1,3.1,3.1,3.1,
			-1.0,-1.0,-1.0,-1.0,1.9,1.9,1.9,1.9,0.1,0.1,0.1,0.1,4.3,4.3,4.3,4.3,
			-1.5,-1.5,-1.5,-1.5,1.4,1.4,1.4,1.4,-0.4,-0.4,-0.4,-0.4,3.8,3.8,3.8,3.8,
			-1.9,-1.9,-1.9,-1.9,1.0,1.0,1.0,1.0,-0.8,-0.8,-0.8,-0.8,3.4,3.4,3.4,3.4,
			-2.2,-2.2,-2.2,-2.2,0.7,0.7,0.7,0.7,-1.1,-1.1,-1.1,-1.1,3.1,3.1,3.1,3.1,
			-1.0,-1.0,-1.0,-1.0,1.9,1.9,1.9,1.9,0.1,0.1,0.1,0.1,4.3,4.3,4.3,4.3,
			-1.5,-1.5,-1.5,-1.5,1.4,1.4,1.4,1.4,-0.4,-0.4,-0.4,-0.4,3.8,3.8,3.8,3.8,
			-1.9,-1.9,-1.9,-1.9,1.0,1.0,1.0,1.0,-0.8,-0.8,-0.8,-0.8,3.4,3.4,3.4,3.4,
			-2.2,-2.2,-2.2,-2.2,0.7,0.7,0.7,0.7,-1.1,-1.1,-1.1,-1.1,3.1,3.1,3.1,3.1,
			-1.0,-1.0,-1.0,-1.0,1.9,1.9,1.9,1.9,0.1,0.1,0.1,0.1,4.3,4.3,4.3,4.3,
			-1.5,-1.5,-1.5,-1.5,1.4,1.4,1.4,1.4,-0.4,-0.4,-0.4,-0.4,3.8,3.8,3.8,3.8,
			-1.9,-1.9,-1.9,-1.9,1.0,1.0,1.0,1.0,-0.8,-0.8,-0.8,-0.8,3.4,3.4,3.4,3.4,
		],
		# A G
		# T C
		[
			-0.6,-0.6,-0.6,-0.6,-0.2,-0.2,-0.2,-0.2,-0.7,-0.7,-0.7,-0.7,-1.0,-1.0,-1.0,-1.0,
			0.6,0.6,0.6,0.6,1.0,1.0,1.0,1.0,0.5,0.5,0.5,0.5,0.2,0.2,0.2,0.2,
			0.1,0.1,0.1,0.1,0.5,0.5,0.5,0.5,0.0,0.0,0.0,0.0,-0.3,-0.3,-0.3,-0.3,
			-0.3,-0.3,-0.3,-0.3,0.1,0.1,0.1,0.1,-0.4,-0.4,-0.4,-0.4,-0.7,-0.7,-0.7,-0.7,
			-0.6,-0.6,-0.6,-0.6,-0.2,-0.2,-0.2,-0.2,-0.7,-0.7,-0.7,-0.7,-1.0,-1.0,-1.0,-1.0,
			0.6,0.6,0.6,0.6,1.0,1.0,1.0,1.0,0.5,0.5,0.5,0.5,0.2,0.2,0.2,0.2,
			0.1,0.1,0.1,0.1,0.5,0.5,0.5,0.5,0.0,0.0,0.0,0.0,-0.3,-0.3,-0.3,-0.3,
			-0.3,-0.3,-0.3,-0.3,0.1,0.1,0.1,0.1,-0.4,-0.4,-0.4,-0.4,-0.7,-0.7,-0.7,-0.7,
			-0.6,-0.6,-0.6,-0.6,-0.2,-0.2,-0.2,-0.2,-0.7,-0.7,-0.7,-0.7,-1.0,-1.0,-1.0,-1.0,
			0.6,0.6,0.6,0.6,1.0,1.0,1.0,1.0,0.5,0.5,0.5,0.5,0.2,0.2,0.2,0.2,
			0.1,0.1,0.1,0.1,0.5,0.5,0.5,0.5,0.0,0.0,0.0,0.0,-0.3,-0.3,-0.3,-0.3,
			-0.3,-0.3,-0.3,-0.3,0.1,0.1,0.1,0.1,-0.4,-0.4,-0.4,-0.4,-0.7,-0.7,-0.7,-0.7,
			-0.6,-0.6,-0.6,-0.6,-0.2,-0.2,-0.2,-0.2,-0.7,-0.7,-0.7,-0.7,-1.0,-1.0,-1.0,-1.0,
			0.6,0.6,0.6,0.6,1.0,1.0,1.0,1.0,0.5,0.5,0.5,0.5,0.2,0.2,0.2,0.2,
			0.1,0.1,0.1,0.1,0.5,0.5,0.5,0.5,0.0,0.0,0.0,0.0,-0.3,-0.3,-0.3,-0.3,
			-0.3,-0.3,-0.3,-0.3,0.1,0.1,0.1,0.1,-0.4,-0.4,-0.4,-0.4,-0.7,-0.7,-0.7,-0.7,
		],
		# A T
		# T A
		[
			8.0,8.0,8.0,8.0,9.2,9.2,9.2,9.2,8.7,8.7,8.7,8.7,8.3,8.3,8.3,8.3,
			9.2,9.2,9.2,9.2,10.4,10.4,10.4,10.4,9.9,9.9,9.9,9.9,9.5,9.5,9.5,9.5,
			8.7,8.7,8.7,8.7,9.9,9.9,9.9,9.9,9.4,9.4,9.4,9.4,9.0,9.0,9.0,9.0,
			8.3,8.3,8.3,8.3,9.5,9.5,9.5,9.5,9.0,9.0,9.0,9.0,8.6,8.6,8.6,8.6,
			8.0,8.0,8.0,8.0,9.2,9.2,9.2,9.2,8.7,8.7,8.7,8.7,8.3,8.3,8.3,8.3,
			9.2,9.2,9.2,9.2,10.4,10.4,10.4,10.4,9.9,9.9,9.9,9.9,9.5,9.5,9.5,9.5,
			8.7,8.7,8.7,8.7,9.9,9.9,9.9,9.9,9.4,9.4,9.4,9.4,9.0,9.0,9.0,9.0,
			8.3,8.3,8.3,8.3,9.5,9.5,9.5,9.5,9.0,9.0,9.0,9.0,8.6,8.6,8.6,8.6,
			8.0,8.0,8.0,8.0,9.2,9.2,9.2,9.2,8.7,8.7,8.7,8.7,8.3,8.3,8.3,8.3,
			9.2,9.2,9.2,9.2,10.4,10.4,10.4,10.4,9.9,9.9,9.9,9.9,9.5,9.5,9.5,9.5,
			8.7,8.7,8.7,8.7,9.9,9.9,9.9,9.9,9.4,9.4,9.4,9.4,9.0,9.0,9.0,9.0,
			8.3,8.3,8.3,8.3,9.5,9.5,9.5,9.5,9.0,9.0,9.0,9.0,8.6,8.6,8.6,8.6,
			8.0,8.0,8.0,8.0,9.2,9.2,9.2,9.2,8.7,8.7,8.7,8.7,8.3,8.3,8.3,8.3,
			9.2,9.2,9.2,9.2,10.4,10.4,10.4,10.4,9.9,9.9,9.9,9.9,9.5,9.5,9.5,9.5,
			8.7,8.7,8.7,8.7,9.9,9.9,9.9,9.9,9.4,9.4,9.4,9.4,9.0,9.0,9.0,9.0,
			8.3,8.3,8.3,8.3,9.5,9.5,9.5,9.5,9.0,9.0,9.0,9.0,8.6,8.6,8.6,8.6,
		],
		# C A
		# G T
		[
			-2.3,-2.3,-2.3,-2.3,-2.0,-2.0,-2.0,-2.0,-3.9,-3.9,-3.9,-3.9,-10.4,-10.4,-10.4,-10.4,
			-1.9,-1.9,-1.9,-1.9,-1.6,-1.6,-1.6,-1.6,-3.5,-3.5,-3.5,-3.5,-10.0,-10.0,-10.0,-10.0,
			-2.4,-2.4,-2.4,-2.4,-2.1,-2.1,-2.1,-2.1,-4.0,-4.0,-4.0,-4.0,-10.5,-10.5,-10.5,-10.5,
			-2.7,-2.7,-2.7,-2.7,-2.4,-2.4,-2.4,-2.4,-4.3,-4.3,-4.3,-4.3,-10.8,-10.8,-10.8,-10.8,
			-2.3,-2.3,-2.3,-2.3,-2.0,-2.0,-2.0,-2.0,-3.9,-3.9,-3.9,-3.9,-10.4,-10.4,-10.4,-10.4,
			-1.9,-1.9,-1.9,-1.9,-1.6,-1.6,-1.6,-1.6,-3.5,-3.5,-3.5,-3.5,-10.0,-10.0,-10.0,-10.0,
			-2.4,-2.4,-2.4,-2.4,-2.1,-2.1,-2.1,-2.1,-4.0,-4.0,-4.0,-4.0,-10.5,-10.5,-10.5,-10.5,
			-2.7,-2.7,-2.7,-2.7,-2.4,-2.4,-2.4,-2.4,-4.3,-4.3,-4.3,-4.3,-10.8,-10.8,-10.8,-10.8,
			-2.3,-2.3,-2.3,-2.3,-2.0,-2.0,-2.0,-2.0,-3.9,-3.9,-3.9,-3.9,-10.4,-10.4,-10.4,-10.4,
			-1.9,-1.9,-1.9,-1.9,-1.6,-1.6,-1.6,-1.6,-3.5,-3.5,-3.5,-3.5,-10.0,-10.0,-10.0,-10.0,
			-2.4,-2.4,-2.4,-2.4,-2.1,-2.1,-2.1,-2.1,-4.0,-4.0,-4.0,-4.0,-10.5,-10.5,-10.5,-10.5,
			-2.7,-2.7,-2.7,-2.7,-2.4,-2.4,-2.4,-2.4,-4.3,-4.3,-4.3,-4.3,-10.8,-10.8,-10.8,-10.8,
			-2.3,-2.3,-2.3,-2.3,-2.0,-2.0,-2.0,-2.0,-3.9,-3.9,-3.9,-3.9,-10.4,-10.4,-10.4,-10.4,
			-1.9,-1.9,-1.9,-1.9,-1.6,-1.6,-1.6,-1.6,-3.5,-3.5,-3.5,-3.5,-10.0,-10.0,-10.0,-10.0,
			-2.4,-2.4,-2.4,-2.4,-2.1,-2.1,-2.1,-2.1,-4.0,-4.0,-4.0,-4.0,-10.5,-10.5,-10.5,-10.5,
			-2.7,-2.7,-2.7,-2.7,-2.4,-2.4,-2.4,-2.4,-4.3,-4.3,-4.3,-4.3,-10.8,-10.8,-10.8,-10.8,
		],
		# C C
		# G G
		[
			-10.8,-10.8,-10.8,-10.8,-7.9,-7.9,-7.9,-7.9,-9.7,-9.7,-9.7,-9.7,-5.5,-5.5,-5.5,-5.5,
			-10.4,-10.4,-10.4,-10.4,-7.5,-7.5,-7.5,-7.5,-9.3,-9.3,-9.3,-9.3,-5.1,-5.1,-5.1,-5.1,
			-10.9,-10.9,-10.9,-10.9,-8.0,-8.0,-8.0,-8.0,-9.8,-9.8,-9.8,-9.8,-5.6,-5.6,-5.6,-5.6,
			-11.2,-11.2,-11.2,-11.2,-8.3,-8.3,-8.3,-8.3,-10.1,-10.1,-10.1,-10.1,-5.9,-5.9,-5.9,-5.9,
			-10.8,-10.8,-10.8,-10.8,-7.9,-7.9,-7.9,-7.9,-9.7,-9.7,-9.7,-9.7,-5.5,-5.5,-5.5,-5.5,
			-10.4,-10.4,-10.4,-10.4,-7.5,-7.5,-7.5,-7.5,-9.3,-9.3,-9.3,-9.3,-5.1,-5.1,-5.1,-5.1,
			-10.9,-10.9,-10.9,-10.9,-8.0,-8.0,-8.0,-8.0,-9.8,-9.8,-9.8,-9.8,-5.6,-5.6,-5.6,-5.6,
			-11.2,-11.2,-11.2,-11.2,-8.3,-8.3,-8.3,-8.3,-10.1,-10.1,-10.1,-10.1,-5.9,-5.9,-5.9,-5.9,
			-10.8,-10.8,-10.8,-10.8,-7.9,-7.9,-7.9,-7.9,-9.7,-9.7,-9.7,-9.7,-5.5,-5.5,-5.5,-5.5,
			-10.4,-10.4,-10.4,-10.4,-7.5,-7.5,-7.5,-7.5,-9.3,-9.3,-9.3,-9.3,-5.1,-5.1,-5.1,-5.1,
			-10.9,-10.9,-10.9,-10.9,-8.0,-8.0,-8.0,-8.0,-9.8,-9.8,-9.8,-9.8,-5.6,-5.6,-5.6,-5.6,
			-11.2,-11.2,-11.2,-11.2,-8.3,-8.3,-8.3,-8.3,-10.1,-10.1,-10.1,-10.1,-5.9,-5.9,-5.9,-5.9,
			-10.8,-10.8,-10.8,-10.8,-7.9,-7.9,-7.9,-7.9,-9.7,-9.7,-9.7,-9.7,-5.5,-5.5,-5.5,-5.5,
			-10.4,-10.4,-10.4,-10.4,-7.5,-7.5,-7.5,-7.5,-9.3,-9.3,-9.3,-9.3,-5.1,-5.1,-5.1,-5.1,
			-10.9,-10.9,-10.9,-10.9,-8.0,-8.0,-8.0,-8.0,-9.8,-9.8,-9.8,-9.8,-5.6,-5.6,-5.6,-5.6,
			-11.2,-11.2,-11.2,-11.2,-8.3,-8.3,-8.3,-8.3,-10.1,-10.1,-10.1,-10.1,-5.9,-5.9,-5.9,-5.9,
		],
		# C G
		# G C
		[
			-9.2,-9.2,-9.2,-9.2,-8.8,-8.8,-8.8,-8.8,-9.3,-9.3,-9.3,-9.3,-9.6,-9.6,-9.6,-9.6,
			-8.8,-8.8,-8.8,-8.8,-8.4,-8.4,-8.4,-8.4,-8.9,-8.9,-8.9,-8.9,-9.2,-9.2,-9.2,-9.2,
			-9.3,-9.3,-9.3,-9.3,-8.9,-8.9,-8.9,-8.9,-9.4,-9.4,-9.4,-9.4,-9.7,-9.7,-9.7,-9.7,
			-9.6,-9.6,-9.6,-9.6,-9.2,-9.2,-9.2,-9.2,-9.7,-9.7,-9.7,-9.7,-10.0,-10.0,-10.0,-10.0,
			-9.2,-9.2,-9.2,-9.2,-8.8,-8.8,-8.8,-8.8,-9.3,-9.3,-9.3,-9.3,-9.6,-9.6,-9.6,-9.6,
			-8.8,-8.8,-8.8,-8.8,-8.4,-8.4,-8.4,-8.4,-8.9,-8.9,-8.9,-8.9,-9.2,-9.2,-9.2,-9.2,
			-9.3,-9.3,-9.3,-9.3,-8.9,-8.9,-8.9,-8.9,-9.4,-9.4,-9.4,-9.4,-9.7,-9.7,-9.7,-9.7,
			-9.6,-9.6,-9.6,-9.6,-9.2,-9.2,-9.2,-9.2,-9.7,-9.7,-9.7,-9.7,-10.0,-10.0,-10.0,-10.0,
			-9.2,-9.2,-9.2,-9.2,-8.8,-8.8,-8.8,-8.8,-9.3,-9.3,-9.3,-9.3,-9.6,-9.6,-9.6,-9.6,
			-8.8,-8.8,-8.8,-8.8,-8.4,-8.4,-8.4,-8.4,-8.9,-8.9,-8.9,-8.9,-9.2,-9.2,-9.2,-9.2,
			-9.3,-9.3,-9.3,-9.3,-8.9,-8.9,-8.9,-8.9,-9.4,-9.4,-9.4,-9.4,-9.7,-9.7,-9.7,-9.7,
			-9.6,-9.6,-9.6,-9.6,-9.2,-9.2,-9.2,-9.2,-9.7,-9.7,-9.7,-9.7,-10.0,-10.0,-10.0,-10.0,
			-9.2,-9.2,-9.2,-9.2,-8.8,-8.8,-8.8,-8.8,-9.3,-9.3,-9.3,-9.3,-9.6,-9.6,-9.6,-9.6,
			-8.8,-8.8,-8.8,-8.8,-8.4,-8.4,-8.4,-8.4,-8.9,-8.9,-8.9,-8.9,-9.2,-9.2,-9.2,-9.2,
			-9.3,-9.3,-9.3,-9.3,-8.9,-8.9,-8.9,-8.9,-9.4,-9.4,-9.4,-9.4,-9.7,-9.7,-9.7,-9.7,
			-9.6,-9.6,-9.6,-9.6,-9.2,-9.2,-9.2,-9.2,-9.7,-9.7,-9.7,-9.7,-10.0,-10.0,-10.0,-10.0,
		],
		# C T
		# G A
		[
			-0.6,-0.6,-0.6,-0.6,0.6,0.6,0.6,0.6,0.1,0.1,0.1,0.1,-0.3,-0.3,-0.3,-0.3,
			-0.2,-0.2,-0.2,-0.2,1.0,1.0,1.0,1.0,0.5,0.5,0.5,0.5,0.1,0.1,0.1,0.1,
			-0.7,-0.7,-0.7,-0.7,0.5,0.5,0.5,0.5,0.0,0.0,0.0,0.0,-0.4,-0.4,-0.4,-0.4,
			-1.0,-1.0,-1.0,-1.0,0.2,0.2,0.2,0.2,-0.3,-0.3,-0.3,-0.3,-0.7,-0.7,-0.7,-0.7,
			-0.6,-0.6,-0.6,-0.6,0.6,0.6,0.6,0.6,0.1,0.1,0.1,0.1,-0.3,-0.3,-0.3,-0.3,
			-0.2,-0.2,-0.2,-0.2,1.0,1.0,1.0,1.0,0.5,0.5,0.5,0.5,0.1,0.1,0.1,0.1,
			-0.7,-0.7,-0.7,-0.7,0.5,0.5,0.5,0.5,0.0,0.0,0.0,0.0,-0.4,-0.4,-0.4,-0.4,
			-1.0,-1.0,-1.0,-1.0,0.2,0.2,0.2,0.2,-0.3,-0.3,-0.3,-0.3,-0.7,-0.7,-0.7,-0.7,
			-0.6,-0.6,-0.6,-0.6,0.6,0.6,0.6,0.6,0.1,0.1,0.1,0.1,-0.3,-0.3,-0.3,-0.3,
			-0.2,-0.2,-0.2,-0.2,1.0,1.0,1.0,1.0,0.5,0.5,0.5,0.5,0.1,0.1,0.1,0.1,
			-0.7,-0.7,-0.7,-0.7,0.5,0.5,0.5,0.5,0.0,0.0,0.0,0.0,-0.4,-0.4,-0.4,-0.4,
			-1.0,-1.0,-1.0,-1.0,0.2,0.2,0.2,0.2,-0.3,-0.3,-0.3,-0.3,-0.7,-0.7,-0.7,-0.7,
			-0.6,-0.6,-0.6,-0.6,0.6,0.6,0.6,0.6,0.1,0.1,0.1,0.1,-0.3,-0.3,-0.3,-0.3,
			-0.2,-0.2,-0.2,-0.2,1.0,1.0,1.0,1.0,0.5,0.5,0.5,0.5,0.1,0.1,0.1,0.1,
			-0.7,-0.7,-0.7,-0.7,0.5,0.5,0.5,0.5,0.0,0.0,0.0,0.0,-0.4,-0.4,-0.4,-0.4,
			-1.0,-1.0,-1.0,-1.0,0.2,0.2,0.2,0.2,-0.3,-0.3,-0.3,-0.3,-0.7,-0.7,-0.7,-0.7,
		],
		# G A
		# C T
		[
			-3.9,-3.9,-3.9,-3.9,-3.6,-3.6,-3.6,-3.6,-5.5,-5.5,-5.5,-5.5,-12.0,-12.0,-12.0,-12.0,
			-1.0,-1.0,-1.0,-1.0,-0.7,-0.7,-0.7,-0.7,-2.6,-2.6,-2.6,-2.6,-9.1,-9.1,-9.1,-9.1,
			-2.8,-2.8,-2.8,-2.8,-2.5,-2.5,-2.5,-2.5,-4.4,-4.4,-4.4,-4.4,-10.9,-10.9,-10.9,-10.9,
			1.4,1.4,1.4,1.4,1.7,1.7,1.7,1.7,-0.2,-0.2,-0.2,-0.2,-6.7,-6.7,-6.7,-6.7,
			-3.9,-3.9,-3.9,-3.9,-3.6,-3.6,-3.6,-3.6,-5.5,-5.5,-5.5,-5.5,-12.0,-12.0,-12.0,-12.0,
			-1.0,-1.0,-1.0,-1.0,-0.7,-0.7,-0.7,-0.7,-2.6,-2.6,-2.6,-2.6,-9.1,-9.1,-9.1,-9.1,
			-2.8,-2.8,-2.8,-2.8,-2.5,-2.5,-2.5,-2.5,-4.4,-4.4,-4.4,-4.4,-10.9,-10.9,-10.9,-10.9,
			1.4,1.4,1.4,1.4,1.7,1.7,1.7,1.7,-0.2,-0.2,-0.2,-0.2,-6.7,-6.7,-6.7,-6.7,
			-3.9,-3.9,-3.9,-3.9,-3.6,-3.6,-3.6,-3.6,-5.5,-5.5,-5.5,-5.5,-12.0,-12.0,-12.0,-12.0,
			-1.0,-1.0,-1.0,-1.0,-0.7,-0.7,-0.7,-0.7,-2.6,-2.6,-2.6,-2.6,-9.1,-9.1,-9.1,-9.1,
			-2.8,-2.8,-2.8,-2.8,-2.5,-2.5,-2.5,-2.5,-4.4,-4.4,-4.4,-4.4,-10.9,-10.9,-10.9,-10.9,
			1.4,1.4,1.4,1.4,1.7,1.7,1.7,1.7,-0.2,-0.2,-0.2,-0.2,-6.7,-6.7,-6.7,-6.7,
			-3.9,-3.9,-3.9,-3.9,-3.6,-3.6,-3.6,-3.6,-5.5,-5.5,-5.5,-5.5,-12.0,-12.0,-12.0,-12.0,
			-1.0,-1.0,-1.0,-1.0,-0.7,-0.7,-0.7,-0.7,-2.6,-2.6,-2.6,-2.6,-9.1,-9.1,-9.1,-9.1,
			-2.8,-2.8,-2.8,-2.8,-2.5,-2.5,-2.5,-2.5,-4.4,-4.4,-4.4,-4.4,-10.9,-10.9,-10.9,-10.9,
			1.4,1.4,1.4,1.4,1.7,1.7,1.7,1.7,-0.2,-0.2,-0.2,-0.2,-6.7,-6.7,-6.7,-6.7,
		],
		# G C
		# C G
		[
			-12.4,-12.4,-12.4,-12.4,-9.5,-9.5,-9.5,-9.5,-11.3,-11.3,-11.3,-11.3,-7.1,-7.1,-7.1,-7.1,
			-9.5,-9.5,-9.5,-9.5,-6.6,-6.6,-6.6,-6.6,-8.4,-8.4,-8.4,-8.4,-4.2,-4.2,-4.2,-4.2,
			-11.3,-11.3,-11.3,-11.3,-8.4,-8.4,-8.4,-8.4,-10.2,-10.2,-10.2,-10.2,-6.0,-6.0,-6.0,-6.0,
			-7.1,-7.1,-7.1,-7.1,-4.2,-4.2,-4.2,-4.2,-6.0,-6.0,-6.0,-6.0,-1.8,-1.8,-1.8,-1.8,
			-12.4,-12.4,-12.4,-12.4,-9.5,-9.5,-9.5,-9.5,-11.3,-11.3,-11.3,-11.3,-7.1,-7.1,-7.1,-7.1,
			-9.5,-9.5,-9.5,-9.5,-6.6,-6.6,-6.6,-6.6,-8.4,-8.4,-8.4,-8.4,-4.2,-4.2,-4.2,-4.2,
			-11.3,-11.3,-11.3,-11.3,-8.4,-8.4,-8.4,-8.4,-10.2,-10.2,-10.2,-10.2,-6.0,-6.0,-6.0,-6.0,
			-7.1,-7.1,-7.1,-7.1,-4.2,-4.2,-4.2,-4.2,-6.0,-6.0,-6.0,-6.0,-1.8,-1.8,-1.8,-1.8,
			-12.4,-12.4,-12.4,-12.4,-9.5,-9.5,-9.5,-9.5,-11.3,-11.3,-11.3,-11.3,-7.1,-7.1,-7.1,-7.1,
			-9.5,-9.5,-9.5,-9.5,-6.6,-6.6,-6.6,-6.6,-8.4,-8.4,-8.4,-8.4,-4.2,-4.2,-4.2,-4.2,
			-11.3,-11.3,-11.3,-11.3,-8.4,-8.4,-8.4,-8.4,-10.2,-10.2,-10.2,-10.2,-6.0,-6.0,-6.0,-6.0,
			-7.1,-7.1,-7.1,-7.1,-4.2,-4.2,-4.2,-4.2,-6.0,-6.0,-6.0,-6.0,-1.8,-1.8,-1.8,-1.8,
			-12.4,-12.4,-12.4,-12.4,-9.5,-9.5,-9.5,-9.5,-11.3,-11.3,-11.3,-11.3,-7.1,-7.1,-7.1,-7.1,
			-9.5,-9.5,-9.5,-9.5,-6.6,-6.6,-6.6,-6.6,-8.4,-8.4,-8.4,-8.4,-4.2,-4.2,-4.2,-4.2,
			-11.3,-11.3,-11.3,-11.3,-8.4,-8.4,-8.4,-8.4,-10.2,-10.2,-10.2,-10.2,-6.0,-6.0,-6.0,-6.0,
			-7.1,-7.1,-7.1,-7.1,-4.2,-4.2,-4.2,-4.2,-6.0,-6.0,-6.0,-6.0,-1.8,-1.8,-1.8,-1.8,
		],
		# G G
		# C C
		[
			-10.8,-10.8,-10.8,-10.8,-10.4,-10.4,-10.4,-10.4,-10.9,-10.9,-10.9,-10.9,-11.2,-11.2,-11.2,-11.2,
			-7.9,-7.9,-7.9,-7.9,-7.5,-7.5,-7.5,-7.5,-8.0,-8.0,-8.0,-8.0,-8.3,-8.3,-8.3,-8.3,
			-9.7,-9.7,-9.7,-9.7,-9.3,-9.3,-9.3,-9.3,-9.8,-9.8,-9.8,-9.8,-10.1,-10.1,-10.1,-10.1,
			-5.5,-5.5,-5.5,-5.5,-5.1,-5.1,-5.1,-5.1,-5.6,-5.6,-5.6,-5.6,-5.9,-5.9,-5.9,-5.9,
			-10.8,-10.8,-10.8,-10.8,-10.4,-10.4,-10.4,-10.4,-10.9,-10.9,-10.9,-10.9,-11.2,-11.2,-11.2,-11.2,
			-7.9,-7.9,-7.9,-7.9,-7.5,-7.5,-7.5,-7.5,-8.0,-8.0,-8.0,-8.0,-8.3,-8.3,-8.3,-8.3,
			-9.7,-9.7,-9.7,-9.7,-9.3,-9.3,-9.3,-9.3,-9.8,-9.8,-9.8,-9.8,-10.1,-10.1,-10.1,-10.1,
			-5.5,-5.5,-5.5,-5.5,-5.1,-5.1,-5.1,-5.1,-5.6,-5.6,-5.6,-5.6,-5.9,-5.9,-5.9,-5.9,
			-10.8,-10.8,-10.8,-10.8,-10.4,-10.4,-10.4,-10.4,-10.9,-10.9,-10.9,-10.9,-11.2,-11.2,-11.2,-11.2,
			-7.9,-7.9,-7.9,-7.9,-7.5,-7.5,-7.5,-7.5,-8.0,-8.0,-8.0,-8.0,-8.3,-8.3,-8.3,-8.3,
			-9.7,-9.7,-9.7,-9.7,-9.3,-9.3,-9.3,-9.3,-9.8,-9.8,-9.8,-9.8,-10.1,-10.1,-10.1,-10.1,
			-5.5,-5.5,-5.5,-5.5,-5.1,-5.1,-5.1,-5.1,-5.6,-5.6,-5.6,-5.6,-5.9,-5.9,-5.9,-5.9,
			-10.8,-10.8,-10.8,-10.8,-10.4,-10.4,-10.4,-10.4,-10.9,-10.9,-10.9,-10.9,-11.2,-11.2,-11.2,-11.2,
			-7.9,-7.9,-7.9,-7.9,-7.5,-7.5,-7.5,-7.5,-8.0,-8.0,-8.0,-8.0,-8.3,-8.3,-8.3,-8.3,
			-9.7,-9.7,-9.7,-9.7,-9.3,-9.3,-9.3,-9.3,-9.8,-9.8,-9.8,-9.8,-10.1,-10.1,-10.1,-10.1,
			-5.5,-5.5,-5.5,-5.5,-5.1,-5.1,-5.1,-5.1,-5.6,-5.6,-5.6,-5.6,-5.9,-5.9,-5.9,-5.9,
		],
		# G T
		# C A
		[
			-2.2,-2.2,-2.2,-2.2,-1.0,-1.0,-1.0,-1.0,-1.5,-1.5,-1.5,-1.5,-1.9,-1.9,-1.9,-1.9,
			0.7,0.7,0.7,0.7,1.9,1.9,1.9,1.9,1.4,1.4,1.4,1.4,1.0,1.0,1.0,1.0,
			-1.1,-1.1,-1.1,-1.1,0.1,0.1,0.1,0.1,-0.4,-0.4,-0.4,-0.4,-0.8,-0.8,-0.8,-0.8,
			3.1,3.1,3.1,3.1,4.3,4.3,4.3,4.3,3.8,3.8,3.8,3.8,3.4,3.4,3.4,3.4,
			-2.2,-2.2,-2.2,-2.2,-1.0,-1.0,-1.0,-1.0,-1.5,-1.5,-1.5,-1.5,-1.9,-1.9,-1.9,-1.9,
			0.7,0.7,0.7,0.7,1.9,1.9,1.9,1.9,1.4,1.4,1.4,1.4,1.0,1.0,1.0,1.0,
			-1.1,-1.1,-1.1,-1.1,0.1,0.1,0.1,0.1,-0.4,-0.4,-0.4,-0.4,-0.8,-0.8,-0.8,-0.8,
			3.1,3.1,3.1,3.1,4.3,4.3,4.3,4.3,3.8,3.8,3.8,3.8,3.4,3.4,3.4,3.4,
			-2.2,-2.2,-2.2,-2.2,-1.0,-1.0,-1.0,-1.0,-1.5,-1.5,-1.5,-1.5,-1.9,-1.9,-1.9,-1.9,
			0.7,0.7,0.7,0.7,1.9,1.9,1.9,1.9,1.4,1.4,1.4,1.4,1.0,1.0,1.0,1.0,
			-1.1,-1.1,-1.1,-1.1,0.1,0.1,0.1,0.1,-0.4,-0.4,-0.4,-0.4,-0.8,-0.8,-0.8,-0.8,
			3.1,3.1,3.1,3.1,4.3,4.3,4.3,4.3,3.8,3.8,3.8,3.8,3.4,3.4,3.4,3.4,
			-2.2,-2.2,-2.2,-2.2,-1.0,-1.0,-1.0,-1.0,-1.5,-1.5,-1.5,-1.5,-1.9,-1.9,-1.9,-1.9,
			0.7,0.7,0.7,0.7,1.9,1.9,1.9,1.9,1.4,1.4,1.4,1.4,1.0,1.0,1.0,1.0,
			-1.1,-1.1,-1.1,-1.1,0.1,0.1,0.1,0.1,-0.4,-0.4,-0.4,-0.4,-0.8,-0.8,-0.8,-0.8,
			3.1,3.1,3.1,3.1,4.3,4.3,4.3,4.3,3.8,3.8,3.8,3.8,3.4,3.4,3.4,3.4,
		],
		# T A
		# A T
		[
			4.6,4.6,4.6,4.6,4.9,4.9,4.9,4.9,3.0,3.0,3.0,3.0,-3.5,-3.5,-3.5,-3.5,
			4.9,4.9,4.9,4.9,5.2,5.2,5.2,5.2,3.3,3.3,3.3,3.3,-3.2,-3.2,-3.2,-3.2,
			3.0,3.0,3.0,3.0,3.3,3.3,3.3,3.3,1.4,1.4,1.4,1.4,-5.1,-5.1,-5.1,-5.1,
			-3.5,-3.5,-3.5,-3.5,-3.2,-3.2,-3.2,-3.2,-5.1,-5.1,-5.1,-5.1,-11.6,-11.6,-11.6,-11.6,
			4.6,4.6,4.6,4.6,4.9,4.9,4.9,4.9,3.0,3.0,3.0,3.0,-3.5,-3.5,-3.5,-3.5,
			4.9,4.9,4.9,4.9,5.2,5.2,5.2,5.2,3.3,3.3,3.3,3.3,-3.2,-3.2,-3.2,-3.2,
			3.0,3.0,3.0,3.0,3.3,3.3,3.3,3.3,1.4,1.4,1.4,1.4,-5.1,-5.1,-5.1,-5.1,
			-3.5,-3.5,-3.5,-3.5,-3.2,-3.2,-3.2,-3.2,-5.1,-5.1,-5.1,-5.1,-11.6,-11.6,-11.6,-11.6,
			4.6,4.6,4.6,4.6,4.9,4.9,4.9,4.9,3.0,3.0,3.0,3.0,-3.5,-3.5,-3.5,-3.5,
			4.9,4.9,4.9,4.9,5.2,5.2,5.2,5.2,3.3,3.3,3.3,3.3,-3.2,-3.2,-3.2,-3.2,
			3.0,3.0,3.0,3.0,3.3,3.3,3.3,3.3,1.4,1.4,1.4,1.4,-5.1,-5.1,-5.1,-5.1,
			-3.5,-3.5,-3.5,-3.5,-3.2,-3.2,-3.2,-3.2,-5.1,-5.1,-5.1,-5.1,-11.6,-11.6,-11.6,-11.6,
			4.6,4.6,4.6,4.6,4.9,4.9,4.9,4.9,3.0,3.0,3.0,3.0,-3.5,-3.5,-3.5,-3.5,
			4.9,4.9,4.9,4.9,5.2,5.2,5.2,5.2,3.3,3.3,3.3,3.3,-3.2,-3.2,-3.2,-3.2,
			3.0,3.0,3.0,3.0,3.3,3.3,3.3,3.3,1.4,1.4,1.4,1.4,-5.1,-5.1,-5.1,-5.1,
			-3.5,-3.5,-3.5,-3.5,-3.2,-3.2,-3.2,-3.2,-5.1,-5.1,-5.1,-5.1,-11.6,-11.6,-11.6,-11.6,
		],
		# T C
		# A G
		[
			-3.9,-3.9,-3.9,-3.9,-1.0,-1.0,-1.0,-1.0,-2.8,-2.8,-2.8,-2.8,1.4,1.4,1.4,1.4,
			-3.6,-3.6,-3.6,-3.6,-0.7,-0.7,-0.7,-0.7,-2.5,-2.5,-2.5,-2.5,1.7,1.7,1.7,1.7,
			-5.5,-5.5,-5.5,-5.5,-2.6,-2.6,-2.6,-2.6,-4.4,-4.4,-4.4,-4.4,-0.2,-0.2,-0.2,-0.2,
			-12.0,-12.0,-12.0,-12.0,-9.1,-9.1,-9.1,-9.1,-10.9,-10.9,-10.9,-10.9,-6.7,-6.7,-6.7,-6.7,
			-3.9,-3.9,-3.9,-3.9,-1.0,-1.0,-1.0,-1.0,-2.8,-2.8,-2.8,-2.8,1.4,1.4,1.4,1.4,
			-3.6,-3.6,-3.6,-3.6,-0.7,-0.7,-0.7,-0.7,-2.5,-2.5,-2.5,-2.5,1.7,1.7,1.7,1.7,
			-5.5,-5.5,-5.5,-5.5,-2.6,-2.6,-2.6,-2.6,-4.4,-4.4,-4.4,-4.4,-0.2,-0.2,-0.2,-0.2,
			-12.0,-12.0,-12.0,-12.0,-9.1,-9.1,-9.1,-9.1,-10.9,-10.9,-10.9,-10.9,-6.7,-6.7,-6.7,-6.7,
			-3.9,-3.9,-3.9,-3.9,-1.0,-1.0,-1.0,-1.0,-2.8,-2.8,-2.8,-2.8,1.4,1.4,1.4,1.4,
			-3.6,-3.6,-3.6,-3.6,-0.7,-0.7,-0.7,-0.7,-2.5,-2.5,-2.5,-2.5,1.7,1.7,1.7,1.7,
			-5.5,-5.5,-5.5,-5.5,-2.6,-2.6,-2.6,-2.6,-4.4,-4.4,-4.4,-4.4,-0.2,-0.2,-0.2,-0.2,
			-12.0,-12.0,-12.0,-12.0,-9.1,-9.1,-9.1,-9.1,-10.9,-10.9,-10.9,-10.9,-6.7,-6.7,-6.7,-6.7,
			-3.9,-3.9,-3.9,-3.9,-1.0,-1.0,-1.0,-1.0,-2.8,-2.8,-2.8,-2.8,1.4,1.4,1.4,1.4,
			-3.6,-3.6,-3.6,-3.6,-0.7,-0.7,-0.7,-0.7,-2.5,-2.5,-2.5,-2.5,1.7,1.7,1.7,1.7,
			-5.5,-5.5,-5.5,-5.5,-2.6,-2.6,-2.6,-2.6,-4.4,-4.4,-4.4,-4.4,-0.2,-0.2,-0.2,-0.2,
			-12.0,-12.0,-12.0,-12.0,-9.1,-9.1,-9.1,-9.1,-10.9,-10.9,-10.9,-10.9,-6.7,-6.7,-6.7,-6.7,
		],
		# T G
		# A C
		[
			-2.3,-2.3,-2.3,-2.3,-1.9,-1.9,-1.9,-1.9,-2.4,-2.4,-2.4,-2.4,-2.7,-2.7,-2.7,-2.7,
			-2.0,-2.0,-2.0,-2.0,-1.6,-1.6,-1.6,-1.6,-2.1,-2.1,-2.1,-2.1,-2.4,-2.4,-2.4,-2.4,
			-3.9,-3.9,-3.9,-3.9,-3.5,-3.5,-3.5,-3.5,-4.0,-4.0,-4.0,-4.0,-4.3,-4.3,-4.3,-4.3,
			-10.4,-10.4,-10.4,-10.4,-10.0,-10.0,-10.0,-10.0,-10.5,-10.5,-10.5,-10.5,-10.8,-10.8,-10.8,-10.8,
			-2.3,-2.3,-2.3,-2.3,-1.9,-1.9,-1.9,-1.9,-2.4,-2.4,-2.4,-2.4,-2.7,-2.7,-2.7,-2.7,
			-2.0,-2.0,-2.0,-2.0,-1.6,-1.6,-1.6,-1.6,-2.1,-2.1,-2.1,-2.1,-2.4,-2.4,-2.4,-2.4,
			-3.9,-3.9,-3.9,-3.9,-3.5,-3.5,-3.5,-3.5,-4.0,-4.0,-4.0,-4.0,-4.3,-4.3,-4.3,-4.3,
			-10.4,-10.4,-10.4,-10.4,-10.0,-10.0,-10.0,-10.0,-10.5,-10.5,-10.5,-10.5,-10.8,-10.8,-10.8,-10.8,
			-2.3,-2.3,-2.3,-2.3,-1.9,-1.9,-1.9,-1.9,-2.4,-2.4,-2.4,-2.4,-2.7,-2.7,-2.7,-2.7,
			-2.0,-2.0,-2.0,-2.0,-1.6,-1.6,-1.6,-1.6,-2.1,-2.1,-2.1,-2.1,-2.4,-2.4,-2.4,-2.4,
			-3.9,-3.9,-3.9,-3.9,-3.5,-3.5,-3.5,-3.5,-4.0,-4.0,-4.0,-4.0,-4.3,-4.3,-4.3,-4.3,
			-10.4,-10.4,-10.4,-10.4,-10.0,-10.0,-10.0,-10.0,-10.5,-10.5,-10.5,-10.5,-10.8,-10.8,-10.8,-10.8,
			-2.3,-2.3,-2.3,-2.3,-1.9,-1.9,-1.9,-1.9,-2.4,-2.4,-2.4,-2.4,-2.7,-2.7,-2.7,-2.7,
			-2.0,-2.0,-2.0,-2.0,-1.6,-1.6,-1.6,-1.6,-2.1,-2.1,-2.1,-2.1,-2.4,-2.4,-2.4,-2.4,
			-3.9,-3.9,-3.9,-3.9,-3.5,-3.5,-3.5,-3.5,-4.0,-4.0,-4.0,-4.0,-4.3,-4.3,-4.3,-4.3,
			-10.4,-10.4,-10.4,-10.4,-10.0,-10.0,-10.0,-10.0,-10.5,-10.5,-10.5,-10.5,-10.8,-10.8,-10.8,-10.8,
		],
		# T T
		# A A
		[
			6.3,6.3,6.3,6.3,7.5,7.5,7.5,7.5,7.0,7.0,7.0,7.0,6.6,6.6,6.6,6.6,
			6.6,6.6,6.6,6.6,7.8,7.8,7.8,7.8,7.3,7.3,7.3,7.3,6.9,6.9,6.9,6.9,
			4.7,4.7,4.7,4.7,5.9,5.9,5.9,5.9,5.4,5.4,5.4,5.4,5.0,5.0,5.0,5.0,
			-1.8,-1.8,-1.8,-1.8,-0.6,-0.6,-0.6,-0.6,-1.1,-1.1,-1.1,-1.1,-1.5,-1.5,-1.5,-1.5,
			6.3,6.3,6.3,6.3,7.5,7.5,7.5,7.5,7.0,7.0,7.0,7.0,6.6,6.6,6.6,6.6,
			6.6,6.6,6.6,6.6,7.8,7.8,7.8,7.8,7.3,7.3,7.3,7.3,6.9,6.9,6.9,6.9,
			4.7,4.7,4.7,4.7,5.9,5.9,5.9,5.9,5.4,5.4,5.4,5.4,5.0,5.0,5.0,5.0,
			-1.8,-1.8,-1.8,-1.8,-0.6,-0.6,-0.6,-0.6,-1.1,-1.1,-1.1,-1.1,-1.5,-1.5,-1.5,-1.5,
			6.3,6.3,6.3,6.3,7.5,7.5,7.5,7.5,7.0,7.0,7.0,7.0,6.6,6.6,6.6,6.6,
			6.6,6.6,6.6,6.6,7.8,7.8,7.8,7.8,7.3,7.3,7.3,7.3,6.9,6.9,6.9,6.9,
			4.7,4.7,4.7,4.7,5.9,5.9,5.9,5.9,5.4,5.4,5.4,5.4,5.0,5.0,5.0,5.0,
			-1.8,-1.8,-1.8,-1.8,-0.6,-0.6,-0.6,-0.6,-1.1,-1.1,-1.1,-1.1,-1.5,-1.5,-1.5,-1.5,
			6.3,6.3,6.3,6.3,7.5,7.5,7.5,7.5,7.0,7.0,7.0,7.0,6.6,6.6,6.6,6.6,
			6.6,6.6,6.6,6.6,7.8,7.8,7.8,7.8,7.3,7.3,7.3,7.3,6.9,6.9,6.9,6.9,
			4.7,4.7,4.7,4.7,5.9,5.9,5.9,5.9,5.4,5.4,5.4,5.4,5.0,5.0,5.0,5.0,
			-1.8,-1.8,-1.8,-1.8,-0.6,-0.6,-0.6,-0.6,-1.1,-1.1,-1.1,-1.1,-1.5,-1.5,-1.5,-1.5,
		],
])

    # init variable
    dH = dS = dG = 0
    
    

    seq1, seq2 = duplex_str.split("\n")
    region_pos_li = loop_region_dict["region_pos"]
    region_type_li = loop_region_dict["region_type"]
    region_idx = 0
    while region_idx <= len(region_pos_li):
        start = region_pos_li[region_idx - 1] if region_idx != 0 else -1
        end = (
            region_pos_li[region_idx] if region_idx != len(region_pos_li) else len(seq1)
        )
        # stack
        if region_idx % 2 == 0 or region_idx == len(region_pos_li):
            start += 1
            end -= 1
            stack_length = end - start + 1
            # if stack length > 1, participate energy calc
            if stack_length > 1:
                segment = seq1[start : end + 1]
                print(segment)
                stack_dh, stack_ds = stack_energy(segment)
                print(f"stack_dh is {stack_dh}")
                dH += stack_dh
                dS += stack_ds
            print(f"stack {start}->{end}")
        # loop
        else:
            loop_idx = region_idx // 2
            loop_type = region_type_li[loop_idx]
            loop_length = end - start + 1
            if not loop_type:  # bulge
                bulge_dh, bulge_ds = bulge_energy(loop_length)
                dH += bulge_dh
                dS += bulge_ds
                print(f"bulge {start} -> {end}")
            else:  # int loop
                segment1 = seq1[start - 1:end + 2]
                print(segment1)
                segment2 = seq2[start - 1:end + 2]
                print(segment2)
                int_loop_dh, int_loop_ds = int_loop_energy(segment1, segment2, int_loop_energy_dict)
                print(f"int_loop_dh is {int_loop_dh}")
                dH += int_loop_dh
                dS += int_loop_ds
                print(f"intloop {start} -> {end}")   
        region_idx += 1       
        
    # calc Tm
    print(f"dS is {dS}")
    print(f"dH is {dH}")


if __name__ == "__main__":
    loop_region_dict = loop_detective("CAGACG\nGTAGGC")
    calc_Tm_by_NN("CAGACG\nGTAGGC", loop_region_dict)
